require(tidyverse)
require(skimr)
d.de = read.csv2("phase1/best.csv", dec=".", strip.white = T, stringsAsFactors = T)
skim(d.de)
require(tidyverse)
install.packages("stringi")
require(tidyverse)
require(tidyverse)
require(skimr)
d.de = read.csv2("phase1/best.csv", dec=".", strip.white = T, stringsAsFactors = T)
skim(d.de)
d.de %>% mutate(evals=round(evals/100)*100) %>% group_by(solver.mapper.target.function.inner.inner, solver.mapper.target.signals, evals) %>% summarise_at(vars(best.fitness.s.task.l.xVelocity), list(Q1=~quantile(., probs=0.25), median=median, Q3=~quantile(., probs=0.75))) %>% ggplot(aes(evals, median, col=solver.mapper.target.function.inner.inner)) + geom_line() + geom_ribbon(aes(ymin=Q1, ymax=Q3, fill=solver.mapper.target.function.inner.inner), alpha=0.2, color=NA) + facet_grid(factor(solver.mapper.target.signals)~.)
d.de %>% mutate(evals=round(evals/100)*100) %>% group_by(solver.mapper.target.function.inner.inner, solver.mapper.target.signals, evals) %>% summarise_at(vars(best.fitness.s.task.l.xVelocity), list(Q1=~quantile(., probs=0.25), median=median, Q3=~quantile(., probs=0.75))) %>% ggplot(aes(evals, median, col=solver.mapper.target.function.inner.inner)) + geom_line() + geom_ribbon(aes(ymin=Q1, ymax=Q3, fill=solver.mapper.target.function.inner.inner), alpha=0.2, color=NA) + facet_grid(factor(solver.mapper.target.signals)~.)
d.de %>% mutate(evals=round(evals/100)*100) %>% group_by(solver.mapper.target.function.inner.inner, solver.mapper.target.signals, evals) %>% summarise_at(vars(best.fitness.s.task.l.xVelocity), list(Q1=~quantile(., probs=0.25), median=median, Q3=~quantile(., probs=0.75))) %>% ggplot(aes(evals, median, col=solver.mapper.target.function.inner.inner)) + geom_line() + geom_ribbon(aes(ymin=Q1, ymax=Q3, fill=solver.mapper.target.function.inner.inner), alpha=0.2, color=NA) + facet_grid(factor(solver.mapper.target.signals)~.)
d.de %>% mutate(evals=round(evals/100)*100) %>% group_by(solver.mapper.target.function.inner.inner, solver.mapper.target.signals, evals) %>% summarise_at(vars(best.genotype.size), list(Q1=~quantile(., probs=0.25), median=median, Q3=~quantile(., probs=0.75))) %>% ggplot(aes(evals, median, col=solver.mapper.target.function.inner.inner)) + geom_line() + geom_ribbon(aes(ymin=Q1, ymax=Q3, fill=solver.mapper.target.function.inner.inner), alpha=0.2, color=NA) + facet_grid(factor(solver.mapper.target.signals)~.)
d.ie1 = read.csv2("phase3/best-1.csv", dec=".", strip.white = T, stringsAsFactors = T)
d.ie3 = read.csv2("phase3/best-3.csv", dec=".", strip.white = T, stringsAsFactors = T)
skim(d.ie1)
levels(d.ie1$solver.mapper)
levels(d.ie1$problem.trainingDataset.filePath)
levels(d.de$solver.mapper.target.function.inner.inner)
d.de = read.csv2("phase1/best.csv", dec=".", strip.white = T, stringsAsFactors = T)
levels(d.de$solver.mapper.target.function.inner.inner) = c("mlp", "ograph", "trees")
d.de %>% mutate(evals=round(evals/100)*100) %>% group_by(solver.mapper.target.function.inner.inner, solver.mapper.target.signals, evals) %>% summarise_at(vars(best.fitness.s.task.l.xVelocity), list(Q1=~quantile(., probs=0.25), median=median, Q3=~quantile(., probs=0.75))) %>% ggplot(aes(evals, median, col=solver.mapper.target.function.inner.inner)) + geom_line() + geom_ribbon(aes(ymin=Q1, ymax=Q3, fill=solver.mapper.target.function.inner.inner), alpha=0.2, color=NA) + facet_grid(factor(solver.mapper.target.signals)~.)
d.de %>% mutate(evals=round(evals/100)*100) %>% group_by(solver.mapper.target.function.inner.inner, solver.mapper.target.signals, evals) %>% summarise_at(vars(best.genotype.size), list(Q1=~quantile(., probs=0.25), median=median, Q3=~quantile(., probs=0.75))) %>% ggplot(aes(evals, median, col=solver.mapper.target.function.inner.inner)) + geom_line() + geom_ribbon(aes(ymin=Q1, ymax=Q3, fill=solver.mapper.target.function.inner.inner), alpha=0.2, color=NA) + facet_grid(factor(solver.mapper.target.signals)~.)
levels(d.ie3$solver.mapper)
str_extract(levels(d.ie1$problem.trainingDataset.filePath), "ro-[a-z]*-")
str_extract(levels(d.ie1$problem.trainingDataset.filePath), "ro-([a-z]*)-", 1)
d.ie1 %>% mutate(learner = solver.mapper, teacher = str_extract(problem.trainingDataset.filePath, "ro-([a-z]*)-", 1))
skim(d.ie1 %>% mutate(learner = solver.mapper, teacher = str_extract(problem.trainingDataset.filePath, "ro-([a-z]*)-", 1)))
skim(d.ie1 %>% mutate(learner = solver.mapper, teacher = factor(str_extract(problem.trainingDataset.filePath, "ro-([a-z]*)-", 1))))
d.ie1 = read.csv2("phase3/best-1.csv", dec=".", strip.white = T, stringsAsFactors = T)
d.ie1 = d.ie1 %>% mutate(learner = solver.mapper, teacher = str_extract(problem.trainingDataset.filePath, "ro-([a-z]*)-", 1))
levels(d.ie1$teacher) = c("mlp", "ograph", "trees")
levels(d.ie1$learner) = c("mlp", "ograph", "trees")
d.ie3 = read.csv2("phase3/best-3.csv", dec=".", strip.white = T, stringsAsFactors = T)
d.ie3 = d.ie3 %>% mutate(learner = solver.mapper, teacher = str_extract(problem.trainingDataset.filePath, "ro-([a-z]*)-", 1))
levels(d.ie3$teacher) = c("mlp", "ograph", "trees")
levels(d.ie3$learner) = c("mlp", "ograph", "trees")
d.ie1 = read.csv2("phase3/best-1.csv", dec=".", strip.white = T, stringsAsFactors = T)
d.ie1 = d.ie1 %>% mutate(learner = solver.mapper, teacher = str_extract(problem.trainingDataset.filePath, "ro-([a-z]*)-", 1), signals = 1)
levels(d.ie1$teacher) = c("mlp", "ograph", "trees")
levels(d.ie1$learner) = c("mlp", "ograph", "trees")
d.ie3 = read.csv2("phase3/best-3.csv", dec=".", strip.white = T, stringsAsFactors = T)
d.ie3 = d.ie3 %>% mutate(learner = solver.mapper, teacher = str_extract(problem.trainingDataset.filePath, "ro-([a-z]*)-", 1), signals = 3)
levels(d.ie3$teacher) = c("mlp", "ograph", "trees")
levels(d.ie3$learner) = c("mlp", "ograph", "trees")
d.di = rbind(d.ie1, d.ie3)
d.ie1 = read.csv2("phase3/best-1.csv", dec=".", strip.white = T, stringsAsFactors = T)
d.ie1 = d.ie1 %>% mutate(learner = solver.mapper, teacher = str_extract(problem.trainingDataset.filePath, "ro-([a-z]*)-", 1), signals = 1)
levels(d.ie1$teacher) = c("mlp", "ograph", "trees")
levels(d.ie1$learner) = c("mlp", "ograph", "trees")
d.ie3 = read.csv2("phase3/best-3.csv", dec=".", strip.white = T, stringsAsFactors = T)
d.ie3 = d.ie3 %>% mutate(learner = solver.mapper, teacher = str_extract(problem.trainingDataset.filePath, "ro-([a-z]*)-", 1), signals = 3)
levels(d.ie3$teacher) = c("mlp", "ograph", "trees")
levels(d.ie3$learner) = c("mlp", "ograph", "trees")
d.di = rbind(d.ie1, d.ie3)
skim(d.di)
d.ie1 = read.csv2("phase3/best-1.csv", dec=".", strip.white = T, stringsAsFactors = T)
d.ie1 = d.ie1 %>% mutate(learner = as.character(solver.mapper), teacher = str_extract(problem.trainingDataset.filePath, "ro-([a-z]*)-", 1), signals = 1) %>% select(randomGenerator.seed, iterations, evals, best.fitness, best.genotype.size)
#levels(d.ie1$teacher) = c("mlp", "ograph", "trees")
#levels(d.ie1$learner) = c("mlp", "ograph", "trees")
d.ie3 = read.csv2("phase3/best-3.csv", dec=".", strip.white = T, stringsAsFactors = T)
d.ie3 = d.ie3 %>% mutate(learner = as.character(solver.mapper), teacher = str_extract(problem.trainingDataset.filePath, "ro-([a-z]*)-", 1), signals = 3) %>% select(randomGenerator.seed, iterations, evals, best.fitness, best.genotype.size)
#levels(d.ie3$teacher) = c("mlp", "ograph", "trees")
#levels(d.ie3$learner) = c("mlp", "ograph", "trees")
d.di = rbind(d.ie1, d.ie3)
skim(d.di)
d.ie1 = read.csv2("phase3/best-1.csv", dec=".", strip.white = T, stringsAsFactors = T)
d.ie1 = d.ie1 %>% mutate(learner = as.character(solver.mapper), teacher = str_extract(problem.trainingDataset.filePath, "ro-([a-z]*)-", 1), signals = 1) %>% select(learner, teacher, randomGenerator.seed, iterations, evals, best.fitness, best.genotype.size)
d.ie3 = read.csv2("phase3/best-3.csv", dec=".", strip.white = T, stringsAsFactors = T)
d.ie3 = d.ie3 %>% mutate(learner = as.character(solver.mapper), teacher = str_extract(problem.trainingDataset.filePath, "ro-([a-z]*)-", 1), signals = 3) %>% select(learner, teacher, randomGenerator.seed, iterations, evals, best.fitness, best.genotype.size)
#levels(d.ie3$teacher) = c("mlp", "ograph", "trees")
#levels(d.ie3$learner) = c("mlp", "ograph", "trees")
d.di = rbind(d.ie1, d.ie3)
skim(d.di)
levels(factor(d.di$teacher))
levels(factor(d.di$learner))
d.ie1 = d.ie1 %>% mutate(learner = str_extract(problem.trainingDataset.filePath, "ea\.m\.-([a-zA-Z]*)MRF", 1), teacher = str_extract(problem.trainingDataset.filePath, "ro-([a-z]*)-", 1), signals = 1) %>% select(learner, teacher, randomGenerator.seed, iterations, evals, best.fitness, best.genotype.size)
d.ie1 = d.ie1 %>% mutate(learner = str_extract(problem.trainingDataset.filePath, "ea\\.m\\.-([a-zA-Z]*)MRF", 1), teacher = str_extract(problem.trainingDataset.filePath, "ro-([a-z]*)-", 1), signals = 1) %>% select(learner, teacher, randomGenerator.seed, iterations, evals, best.fitness, best.genotype.size)
d.ie1 = d.ie1 %>% mutate(learner = str_extract(problem.trainingDataset.filePath, "ea\\.m\\.([a-zA-Z]*)MRF", 1), teacher = str_extract(problem.trainingDataset.filePath, "ro-([a-z]*)-", 1), signals = 1) %>% select(learner, teacher, randomGenerator.seed, iterations, evals, best.fitness, best.genotype.size)
d.ie1 = read.csv2("phase3/best-1.csv", dec=".", strip.white = T, stringsAsFactors = T)
d.ie1 = d.ie1 %>% mutate(learner = str_extract(problem.trainingDataset.filePath, "ea\\.m\\.-([a-zA-Z]*)MRF", 1), teacher = str_extract(problem.trainingDataset.filePath, "ro-([a-z]*)-", 1), signals = 1) %>% select(learner, teacher, randomGenerator.seed, iterations, evals, best.fitness, best.genotype.size)
d.ie3 = read.csv2("phase3/best-3.csv", dec=".", strip.white = T, stringsAsFactors = T)
d.ie3 = d.ie3 %>% mutate(learner = as.character(solver.mapper), teacher = str_extract(problem.trainingDataset.filePath, "ro-([a-z]*)-", 1), signals = 3) %>% select(learner, teacher, randomGenerator.seed, iterations, evals, best.fitness, best.genotype.size)
#levels(d.ie3$teacher) = c("mlp", "ograph", "trees")
#levels(d.ie3$learner) = c("mlp", "ograph", "trees")
d.di = rbind(d.ie1, d.ie3)
summary(d.di)
head(d.di)
d.ie1 = read.csv2("phase3/best-1.csv", dec=".", strip.white = T, stringsAsFactors = T)
d.ie1 = d.ie1 %>% mutate(learner = str_extract(solver.mapper, "ea\\.m\\.-([a-zA-Z]*)MRF", 1), teacher = str_extract(problem.trainingDataset.filePath, "ro-([a-z]*)-", 1), signals = 1) %>% select(learner, teacher, randomGenerator.seed, iterations, evals, best.fitness, best.genotype.size)
d.ie3 = read.csv2("phase3/best-3.csv", dec=".", strip.white = T, stringsAsFactors = T)
d.ie3 = d.ie3 %>% mutate(learner = as.character(solver.mapper), teacher = str_extract(problem.trainingDataset.filePath, "ro-([a-z]*)-", 1), signals = 3) %>% select(learner, teacher, randomGenerator.seed, iterations, evals, best.fitness, best.genotype.size)
#levels(d.ie3$teacher) = c("mlp", "ograph", "trees")
#levels(d.ie3$learner) = c("mlp", "ograph", "trees")
d.di = rbind(d.ie1, d.ie3)
summary(d.di)
d.ie1 = read.csv2("phase3/best-1.csv", dec=".", strip.white = T, stringsAsFactors = T)
d.ie1 = d.ie1 %>% mutate(learner = str_extract(solver.mapper, "ea\\.m\\.-([a-zA-Z]*)MRF", 1), teacher = str_extract(problem.trainingDataset.filePath, "ro-([a-z]*)-", 1), signals = 1) %>% select(learner, teacher, randomGenerator.seed, iterations, evals, best.fitness, best.genotype.size)
d.ie3 = read.csv2("phase3/best-3.csv", dec=".", strip.white = T, stringsAsFactors = T)
d.ie3 = d.ie3 %>% mutate(learner = as.character(solver.mapper), teacher = str_extract(problem.trainingDataset.filePath, "ro-([a-z]*)-", 1), signals = 3) %>% select(learner, teacher, randomGenerator.seed, iterations, evals, best.fitness, best.genotype.size)
#levels(d.ie3$teacher) = c("mlp", "ograph", "trees")
#levels(d.ie3$learner) = c("mlp", "ograph", "trees")
d.di = rbind(d.ie1, d.ie3)
head(d.di)
str_extract("ea.m.treeMRF", "ea\\.m\\.-([a-zA-Z]*)MRF", 1)
str_extract("ea.m.treeMRF", "ea\\.m\\.([a-zA-Z]*)MRF", 1)
d.ie1 = read.csv2("phase3/best-1.csv", dec=".", strip.white = T, stringsAsFactors = T)
d.ie1 = d.ie1 %>% mutate(learner = str_extract(solver.mapper, "ea\\.m\\.([a-zA-Z]*)MRF", 1), teacher = str_extract(problem.trainingDataset.filePath, "ro-([a-z]*)-", 1), signals = 1) %>% select(learner, teacher, randomGenerator.seed, iterations, evals, best.fitness, best.genotype.size)
d.ie3 = read.csv2("phase3/best-3.csv", dec=".", strip.white = T, stringsAsFactors = T)
d.ie3 = d.ie3 %>% mutate(learner = as.character(solver.mapper), teacher = str_extract(problem.trainingDataset.filePath, "ro-([a-z]*)-", 1), signals = 3) %>% select(learner, teacher, randomGenerator.seed, iterations, evals, best.fitness, best.genotype.size)
#levels(d.ie3$teacher) = c("mlp", "ograph", "trees")
#levels(d.ie3$learner) = c("mlp", "ograph", "trees")
d.di = rbind(d.ie1, d.ie3)
head(d.di)
d.ie1 = read.csv2("phase3/best-1.csv", dec=".", strip.white = T, stringsAsFactors = T)
d.ie1 = d.ie1 %>% mutate(learner = str_extract(solver.mapper, "ea\\.m\\.([a-zA-Z]*)MRF", 1), teacher = str_extract(problem.trainingDataset.filePath, "ro-([a-z]*)-", 1), signals = 1) %>% select(learner, teacher, randomGenerator.seed, iterations, evals, best.fitness, best.genotype.size)
d.ie3 = read.csv2("phase3/best-3.csv", dec=".", strip.white = T, stringsAsFactors = T)
d.ie3 = d.ie3 %>% mutate(learner = str_extract(solver.mapper, "ea\\.m\\.([a-zA-Z]*)MRF", 1), teacher = str_extract(problem.trainingDataset.filePath, "ro-([a-z]*)-", 1), signals = 3) %>% select(learner, teacher, randomGenerator.seed, iterations, evals, best.fitness, best.genotype.size)
#levels(d.ie3$teacher) = c("mlp", "ograph", "trees")
#levels(d.ie3$learner) = c("mlp", "ograph", "trees")
d.di = rbind(d.ie1, d.ie3)
head(d.di)
skim(d.di)
d.ie1 = read.csv2("phase3/best-1.csv", dec=".", strip.white = T, stringsAsFactors = T)
d.ie1 = d.ie1 %>% mutate(learner = str_extract(solver.mapper, "ea\\.m\\.([a-zA-Z]*)MRF", 1), teacher = str_extract(problem.trainingDataset.filePath, "ro-([a-z]*)-", 1), signals = 1) %>% select(learner, teacher, randomGenerator.seed, iterations, evals, best.fitness, best.genotype.size)
d.ie3 = read.csv2("phase3/best-3.csv", dec=".", strip.white = T, stringsAsFactors = T)
d.ie3 = d.ie3 %>% mutate(learner = str_extract(solver.mapper, "ea\\.m\\.([a-zA-Z]*)MRF", 1), teacher = str_extract(problem.trainingDataset.filePath, "ro-([a-z]*)-", 1), signals = 3) %>% select(learner, teacher, randomGenerator.seed, iterations, evals, best.fitness, best.genotype.size)
#levels(d.ie3$teacher) = c("mlp", "ograph", "trees")
#levels(d.ie3$learner) = c("mlp", "ograph", "trees")
d.di = rbind(d.ie1, d.ie3)
d.di = d.di %>% mutate(teacher = factor(teacher), learner = factor(learner))
head(d.di)
skim(d.di)
View(d.ie1)
d.ie1 = read.csv2("phase3/best-1.csv", dec=".", strip.white = T, stringsAsFactors = T)
View(d.ie1)
d.ie1[1,1]
d.ie %>% mutate(evals=round(evals/100)*100) %>% group_by(teacher, learner, signals, evals) %>% summarise_at(vars(best.fitness), list(Q1=~quantile(., probs=0.25), median=median, Q3=~quantile(., probs=0.75))) %>% ggplot(aes(evals, median, col=learner)) + geom_line() + geom_ribbon(aes(ymin=Q1, ymax=Q3, fill=solver.mapper.target.function.inner.inner), alpha=0.2, color=NA) + facet_grid(factor(signals)~teacher)
d.ie1 = read.csv2("phase3/best-1.csv", dec=".", strip.white = T, stringsAsFactors = T)
d.ie1 = d.ie1 %>% mutate(learner = str_extract(solver.mapper, "ea\\.m\\.([a-zA-Z]*)MRF", 1), teacher = str_extract(problem.trainingDataset.filePath, "ro-([a-z]*)-", 1), signals = 1) %>% select(learner, teacher, randomGenerator.seed, iterations, evals, best.fitness, best.genotype.size)
d.ie3 = read.csv2("phase3/best-3.csv", dec=".", strip.white = T, stringsAsFactors = T)
d.ie3 = d.ie3 %>% mutate(learner = str_extract(solver.mapper, "ea\\.m\\.([a-zA-Z]*)MRF", 1), teacher = str_extract(problem.trainingDataset.filePath, "ro-([a-z]*)-", 1), signals = 3) %>% select(learner, teacher, randomGenerator.seed, iterations, evals, best.fitness, best.genotype.size)
d.ie = rbind(d.ie1, d.ie3)
d.ie = d.ie %>% mutate(teacher = factor(teacher), learner = factor(learner))
d.ie %>% mutate(evals=round(evals/100)*100) %>% group_by(teacher, learner, signals, evals) %>% summarise_at(vars(best.fitness), list(Q1=~quantile(., probs=0.25), median=median, Q3=~quantile(., probs=0.75))) %>% ggplot(aes(evals, median, col=learner)) + geom_line() + geom_ribbon(aes(ymin=Q1, ymax=Q3, fill=solver.mapper.target.function.inner.inner), alpha=0.2, color=NA) + facet_grid(factor(signals)~teacher)
d.ie1 = read.csv2("phase3/best-1.csv", dec=".", strip.white = T, stringsAsFactors = T)
d.ie1 = d.ie1 %>% mutate(learner = str_extract(solver.mapper, "ea\\.m\\.([a-zA-Z]*)MRF", 1), teacher = str_extract(problem.trainingDataset.filePath, "ro-([a-z]*)-", 1), signals = 1) %>% select(learner, teacher, randomGenerator.seed, iterations, evals, best.fitness, best.genotype.size)
d.ie3 = read.csv2("phase3/best-3.csv", dec=".", strip.white = T, stringsAsFactors = T)
d.ie3 = d.ie3 %>% mutate(learner = str_extract(solver.mapper, "ea\\.m\\.([a-zA-Z]*)MRF", 1), teacher = str_extract(problem.trainingDataset.filePath, "ro-([a-z]*)-", 1), signals = 3) %>% select(learner, teacher, randomGenerator.seed, iterations, evals, best.fitness, best.genotype.size, signals)
d.ie = rbind(d.ie1, d.ie3)
d.ie1 = read.csv2("phase3/best-1.csv", dec=".", strip.white = T, stringsAsFactors = T)
d.ie1 = d.ie1 %>% mutate(learner = str_extract(solver.mapper, "ea\\.m\\.([a-zA-Z]*)MRF", 1), teacher = str_extract(problem.trainingDataset.filePath, "ro-([a-z]*)-", 1), signals = 1) %>% select(learner, teacher, randomGenerator.seed, iterations, evals, best.fitness, best.genotype.size, signals)
d.ie3 = read.csv2("phase3/best-3.csv", dec=".", strip.white = T, stringsAsFactors = T)
d.ie3 = d.ie3 %>% mutate(learner = str_extract(solver.mapper, "ea\\.m\\.([a-zA-Z]*)MRF", 1), teacher = str_extract(problem.trainingDataset.filePath, "ro-([a-z]*)-", 1), signals = 3) %>% select(learner, teacher, randomGenerator.seed, iterations, evals, best.fitness, best.genotype.size, signals)
d.ie = rbind(d.ie1, d.ie3)
d.ie = d.ie %>% mutate(teacher = factor(teacher), learner = factor(learner))
d.ie %>% mutate(evals=round(evals/100)*100) %>% group_by(teacher, learner, signals, evals) %>% summarise_at(vars(best.fitness), list(Q1=~quantile(., probs=0.25), median=median, Q3=~quantile(., probs=0.75))) %>% ggplot(aes(evals, median, col=learner)) + geom_line() + geom_ribbon(aes(ymin=Q1, ymax=Q3, fill=solver.mapper.target.function.inner.inner), alpha=0.2, color=NA) + facet_grid(factor(signals)~teacher)
d.ie %>% mutate(evals=round(evals/100)*100) %>% group_by(teacher, learner, signals, evals) %>% summarise_at(vars(best.fitness), list(Q1=~quantile(., probs=0.25), median=median, Q3=~quantile(., probs=0.75))) %>% ggplot(aes(evals, median, col=learner)) + geom_line() + geom_ribbon(aes(ymin=Q1, ymax=Q3, fill=learner), alpha=0.2, color=NA) + facet_grid(factor(signals)~teacher)
d.ie %>% mutate(evals=round(evals/100)*100) %>% group_by(teacher, learner, signals, evals) %>% summarise_at(vars(best.fitness), list(Q1=~quantile(., probs=0.25), median=median, Q3=~quantile(., probs=0.75))) %>% ggplot(aes(evals, median, col=learner)) + geom_line() + geom_ribbon(aes(ymin=Q1, ymax=Q3, fill=learner), alpha=0.2, color=NA) + facet_grid(factor(signals)~teacher)
d4.ga1 = read.table("phase4/ga-1.tsv");
View(d4.ga1)
d4.ga1 = read.table("phase4/ga-1.tsv") %>% mutate(signals = 1);
View(d4.ga1)
d4.ga1 = read.table("phase4/ga-1.tsv") %>% mutate(signals = 1);
d4.ga3 = read.table("phase4/ga-3.tsv") %>% mutate(signals = 3);
d4.gp1 = read.table("phase4/gp-1.tsv") %>% mutate(signals = 1);
d4.gp3 = read.table("phase4/gp-3.tsv") %>% mutate(signals = 3);
d4.ograph1 = read.table("phase4/ographea-1.tsv") %>% mutate(signals = 1);
d4.ograph3 = read.table("phase4/ographea-3.tsv") %>% mutate(signals = 3);
d4 = rbind(d4.ga1, d4.ga3, d4.gp1, d4.gp3, d4.ograph1, d4.ograph3);
View(d4)
d4.ga1 = read.table("phase4/ga-1.tsv") %>% mutate(signals = 1);
d4.ga3 = read.table("phase4/ga-3.tsv") %>% mutate(signals = 3);
d4.gp1 = read.table("phase4/gp-1.tsv") %>% mutate(signals = 1);
d4.gp3 = read.table("phase4/gp-3.tsv") %>% mutate(signals = 3);
d4.ograph1 = read.table("phase4/ographea-1.tsv") %>% mutate(signals = 1);
d4.ograph3 = read.table("phase4/ographea-3.tsv") %>% mutate(signals = 3);
d4 = rbind(d4.ga1, d4.ga3, d4.gp1, d4.gp3, d4.ograph1, d4.ograph3);
names(d4) = c(learner, teacher, file, xVelocity, signals)
d4.ga1 = read.table("phase4/ga-1.tsv") %>% mutate(signals = 1);
d4.ga3 = read.table("phase4/ga-3.tsv") %>% mutate(signals = 3);
d4.gp1 = read.table("phase4/gp-1.tsv") %>% mutate(signals = 1);
d4.gp3 = read.table("phase4/gp-3.tsv") %>% mutate(signals = 3);
d4.ograph1 = read.table("phase4/ographea-1.tsv") %>% mutate(signals = 1);
d4.ograph3 = read.table("phase4/ographea-3.tsv") %>% mutate(signals = 3);
d4 = rbind(d4.ga1, d4.ga3, d4.gp1, d4.gp3, d4.ograph1, d4.ograph3);
names(d4) = c("learner", "teacher", "file", "xVelocity", "signals")
d4 = d4 %>% mutate(learner = factor(str_extract(learner, "ea\\.m\\.([a-zA-Z]*)MRF", 1)), teacher = factor(str_extract(teacher, "ro-([a-z]*)-", 1))) %>% select(learner, teacher, xVelocity, signals)
View(d4)
d4 = group_by(learner, teacher, signals) %>% summarise_at(vars(xVelocity), list = c(median))
d4 %>% group_by(learner, teacher, signals) %>% summarise_at(vars(xVelocity), list = c(median))
d4 %>% group_by(learner, teacher, signals) %>% summarise_at(vars(xVelocity), list(median))
d4 %>% group_by(learner, teacher, signals) %>% summarise_at(vars(xVelocity), list(Q1=~quantile(., probs=0.25), median=median, Q3=~quantile(., probs=0.75)))
d4 %>% group_by(learner, teacher, signals) %>% summarise_at(vars(xVelocity), list(P25=~quantile(., probs=0.25), median=median, P75=~quantile(., probs=0.75), P90=~quantile(., probs=0.90)))
d4 %>% ggplot(aes(x = learner, y = xVelocity, color = learner)) + geom_boxplot() + facet_grid(factor(signals) ~ teacher)
d.de %>% mutate(evals=round(evals/100)*100) %>% group_by(solver.mapper.target.function.inner.inner, solver.mapper.target.signals, evals) %>% summarise_at(vars(best.fitness.s.task.l.xVelocity), list(Q1=~quantile(., probs=0.25), median=median, Q3=~quantile(., probs=0.75)))
d.de %>% mutate(evals=round(evals/100)*100) %>% group_by(solver.mapper.target.function.inner.inner, solver.mapper.target.signals, evals) %>% summarise_at(vars(best.fitness.s.task.l.xVelocity), list(Q1=~quantile(., probs=0.25), median=median, Q3=~quantile(., probs=0.75))) %>% ggplot(aes(evals, median, col=solver.mapper.target.function.inner.inner)) + geom_line(linetype= factor(signals)) + geom_ribbon(aes(ymin=Q1, ymax=Q3, fill=solver.mapper.target.function.inner.inner), alpha=0.2, color=NA) #+ facet_grid(factor(solver.mapper.target.signals)~.)
d.de %>% mutate(evals=round(evals/100)*100) %>% group_by(solver.mapper.target.function.inner.inner, solver.mapper.target.signals, evals) %>% summarise_at(vars(best.fitness.s.task.l.xVelocity), list(Q1=~quantile(., probs=0.25), median=median, Q3=~quantile(., probs=0.75))) %>% ggplot(aes(evals, median, col=solver.mapper.target.function.inner.inner)) + geom_line(linetype= factor(solver.mapper.target.signals)) + geom_ribbon(aes(ymin=Q1, ymax=Q3, fill=solver.mapper.target.function.inner.inner), alpha=0.2, color=NA) #+ facet_grid(factor(solver.mapper.target.signals)~.)
d.de %>% mutate(evals=round(evals/100)*100) %>% group_by(solver.mapper.target.function.inner.inner, solver.mapper.target.signals, evals) %>% summarise_at(vars(best.fitness.s.task.l.xVelocity), list(Q1=~quantile(., probs=0.25), median=median, Q3=~quantile(., probs=0.75))) %>% ggplot(aes(evals, median, col=solver.mapper.target.function.inner.inner, group = factor(solver.mapper.target.signals))) + geom_line() + geom_ribbon(aes(ymin=Q1, ymax=Q3, fill=solver.mapper.target.function.inner.inner), alpha=0.2, color=NA) #+ facet_grid(factor(solver.mapper.target.signals)~.)
d.de %>% mutate(evals=round(evals/100)*100) %>% group_by(solver.mapper.target.function.inner.inner, solver.mapper.target.signals, evals) %>% summarise_at(vars(best.fitness.s.task.l.xVelocity), list(Q1=~quantile(., probs=0.25), median=median, Q3=~quantile(., probs=0.75))) %>% ggplot(aes(evals, median, col=solver.mapper.target.function.inner.inner, group = factor(solver.mapper.target.signals))) + geom_line() + geom_ribbon(aes(ymin=Q1, ymax=Q3, fill=solver.mapper.target.function.inner.inner, group = factor(solver.mapper.target.signals)), alpha=0.2, color=NA) #+ facet_grid(factor(solver.mapper.target.signals)~.)
d.de %>% mutate(evals=round(evals/100)*100) %>% group_by(solver.mapper.target.function.inner.inner, solver.mapper.target.signals, evals) %>% summarise_at(vars(best.fitness.s.task.l.xVelocity), list(Q1=~quantile(., probs=0.25), median=median, Q3=~quantile(., probs=0.75))) %>% ggplot(aes(evals, median, col=solver.mapper.target.function.inner.inner)) + geom_line() + geom_ribbon(aes(ymin=Q1, ymax=Q3, fill=solver.mapper.target.function.inner.inner), alpha=0.2, color=NA) + facet_grid(factor(solver.mapper.target.signals)~.)
d.ie %>% mutate(evals=round(evals/100)*100) %>% group_by(teacher, learner, signals, evals) %>% summarise_at(vars(best.fitness), list(Q1=~quantile(., probs=0.25), median=median, Q3=~quantile(., probs=0.75))) %>% ggplot(aes(evals, median, col=learner)) + geom_line() + geom_ribbon(aes(ymin=Q1, ymax=Q3, fill=learner), alpha=0.2, color=NA) + facet_grid(factor(signals)~teacher)
d4 %>% group_by(learner, teacher, signals) %>% summarise_at(vars(xVelocity), list(P25=~quantile(., probs=0.25), median=median, P75=~quantile(., probs=0.75), P90=~quantile(., probs=0.90)))
d4 %>% ggplot(aes(x = learner, y = xVelocity, color = learner)) + geom_boxplot() + facet_grid(factor(signals) ~ teacher)
d.ie1 = read.csv2("phase3/best-1.csv", dec=".", strip.white = T, stringsAsFactors = T)
d.ie1 = d.ie1 %>% mutate(learner = str_extract(solver.mapper, "ea\\.m\\.([a-zA-Z]*)MRF", 1), teacher = str_extract(problem.trainingDataset.filePath, "ro-([a-z]*)-", 1), signals = 1) %>% select(learner, teacher, randomGenerator.seed, iterations, evals, best.fitness, best.genotype.size, signals)
d.ie3 = read.csv2("phase3/best-3.csv", dec=".", strip.white = T, stringsAsFactors = T)
d.ie3 = d.ie3 %>% mutate(learner = str_extract(solver.mapper, "ea\\.m\\.([a-zA-Z]*)MRF", 1), teacher = str_extract(problem.trainingDataset.filePath, "ro-([a-z]*)-", 1), signals = 3) %>% select(learner, teacher, randomGenerator.seed, iterations, evals, best.fitness, best.genotype.size, signals)
d.ie = rbind(d.ie1, d.ie3)
d.ie = d.ie %>% mutate(teacher = factor(teacher), learner = factor(learner))
d.de %>% mutate(evals=round(evals/100)*100) %>% group_by(solver.mapper.target.function.inner.inner, solver.mapper.target.signals, evals) %>% summarise_at(vars(best.genotype.size), list(Q1=~quantile(., probs=0.25), median=median, Q3=~quantile(., probs=0.75))) %>% ggplot(aes(evals, median, col=solver.mapper.target.function.inner.inner)) + geom_line() + geom_ribbon(aes(ymin=Q1, ymax=Q3, fill=solver.mapper.target.function.inner.inner), alpha=0.2, color=NA) + facet_grid(factor(solver.mapper.target.signals)~.)
require(tidyverse)
require(skimr)
d.de = read.csv2("phase1/best.csv", dec=".", strip.white = T, stringsAsFactors = T)
levels(d.de$solver.mapper.target.function.inner.inner) = c("mlp", "ograph", "trees")
d.de %>% mutate(evals=round(evals/100)*100) %>% group_by(solver.mapper.target.function.inner.inner, solver.mapper.target.signals, evals) %>% summarise_at(vars(best.fitness.s.task.l.xVelocity), list(Q1=~quantile(., probs=0.25), median=median, Q3=~quantile(., probs=0.75))) %>% ggplot(aes(evals, median, col=solver.mapper.target.function.inner.inner)) + geom_line() + geom_ribbon(aes(ymin=Q1, ymax=Q3, fill=solver.mapper.target.function.inner.inner), alpha=0.2, color=NA) + facet_grid(factor(solver.mapper.target.signals)~.)
d.de %>% mutate(evals=round(evals/100)*100) %>% group_by(solver.mapper.target.function.inner.inner, solver.mapper.target.signals, evals) %>% summarise_at(vars(best.fitness.s.task.l.xVelocity), list(Q1=~quantile(., probs=0.25), median=median, Q3=~quantile(., probs=0.75)))
d.de %>% mutate(evals=round(evals/100)*100) %>% group_by(solver.mapper.target.function.inner.inner, solver.mapper.target.signals, evals) %>% summarise_at(vars(best.genotype.size), list(Q1=~quantile(., probs=0.25), median=median, Q3=~quantile(., probs=0.75))) %>% ggplot(aes(evals, median, col=solver.mapper.target.function.inner.inner)) + geom_line() + geom_ribbon(aes(ymin=Q1, ymax=Q3, fill=solver.mapper.target.function.inner.inner), alpha=0.2, color=NA) + facet_grid(factor(solver.mapper.target.signals)~.)
d.ie1 = read.csv2("phase3/best-1.csv", dec=".", strip.white = T, stringsAsFactors = T)
d.ie1 = d.ie1 %>% mutate(learner = str_extract(solver.mapper, "ea\\.m\\.([a-zA-Z]*)MRF", 1), teacher = str_extract(problem.trainingDataset.filePath, "ro-([a-z]*)-", 1), signals = 1) %>% select(learner, teacher, randomGenerator.seed, iterations, evals, best.fitness, best.genotype.size, signals)
d.ie3 = read.csv2("phase3/best-3.csv", dec=".", strip.white = T, stringsAsFactors = T)
d.ie3 = d.ie3 %>% mutate(learner = str_extract(solver.mapper, "ea\\.m\\.([a-zA-Z]*)MRF", 1), teacher = str_extract(problem.trainingDataset.filePath, "ro-([a-z]*)-", 1), signals = 3) %>% select(learner, teacher, randomGenerator.seed, iterations, evals, best.fitness, best.genotype.size, signals)
d.ie = rbind(d.ie1, d.ie3)
d.ie = d.ie %>% mutate(teacher = factor(teacher), learner = factor(learner))
d.ie %>% mutate(evals=round(evals/100)*100) %>% group_by(teacher, learner, signals, evals) %>% summarise_at(vars(best.fitness), list(Q1=~quantile(., probs=0.25), median=median, Q3=~quantile(., probs=0.75))) %>% ggplot(aes(evals, median, col=learner)) + geom_line() + geom_ribbon(aes(ymin=Q1, ymax=Q3, fill=learner), alpha=0.2, color=NA) + facet_grid(factor(signals)~teacher)
d4.ga1 = read.table("phase4/ga-1.tsv") %>% mutate(signals = 1);
d4.ga3 = read.table("phase4/ga-3.tsv") %>% mutate(signals = 3);
d4.gp1 = read.table("phase4/gp-1.tsv") %>% mutate(signals = 1);
d4.gp3 = read.table("phase4/gp-3.tsv") %>% mutate(signals = 3);
d4.ograph1 = read.table("phase4/ographea-1.tsv") %>% mutate(signals = 1);
d4.ograph3 = read.table("phase4/ographea-3.tsv") %>% mutate(signals = 3);
d4 = rbind(d4.ga1, d4.ga3, d4.gp1, d4.gp3, d4.ograph1, d4.ograph3);
names(d4) = c("learner", "teacher", "file", "xVelocity", "signals")
d4 = d4 %>% mutate(learner = factor(str_extract(learner, "ea\\.m\\.([a-zA-Z]*)MRF", 1)), teacher = factor(str_extract(teacher, "ro-([a-z]*)-", 1))) %>% select(learner, teacher, xVelocity, signals)
d4 %>% group_by(learner, teacher, signals) %>% summarise_at(vars(xVelocity), list(P25=~quantile(., probs=0.25), median=median, P75=~quantile(., probs=0.75), P90=~quantile(., probs=0.90)))
