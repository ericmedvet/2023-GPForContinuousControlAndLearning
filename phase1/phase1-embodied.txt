ea.experiment(
  runs = (randomGenerator = (seed = [1:1:10]) * [ea.rg.defaultRG()]) *
    (solver = [
      ea.s.multiSRTreeGP(
        mapper = er.m.treeParametrizedHomoBrains(target = s.a.distributedNumGridVSR(
          body = s.a.vsr.gridBody(
            sensorizingFunction = s.a.vsr.sf.uniform(
              sensors = [s.s.ar(); s.s.rv(a = 0); s.s.rv(a = 90); s.s.d(a = -90; r = 1)]
            );
            shape = s.a.vsr.s.biped(w = 4; h = 3)
          );
          function = ds.num.noised(inputSigma = 0.05; inner = ds.num.outStepped(stepT = 0.2; inner = er.ds.num.treeMRF(postOperator = tanh)));
          signals = 1
        ));
        nEval = 10000;
        nPop = 100;
        diversity = true
      );
      ea.s.numGA(
        mapper = er.m.numericalParametrizedHomoBrains(target = s.a.distributedNumGridVSR(
          body = s.a.vsr.gridBody(
            sensorizingFunction = s.a.vsr.sf.uniform(
              sensors = [s.s.ar(); s.s.rv(a = 0); s.s.rv(a = 90); s.s.d(a = -90; r = 1)]
            );
            shape = s.a.vsr.s.biped(w = 4; h = 3)
          );
          function = ds.num.noised(inputSigma = 0.05; inner = ds.num.outStepped(stepT = 0.2; inner = ds.num.mlp()));
          signals = 1
        ));
        nEval = 10000;
        nPop = 100
      );
      ea.s.oGraphea(
        mapper = er.m.oGraphParametrizedHomoBrains(target = s.a.distributedNumGridVSR(
          body = s.a.vsr.gridBody(
            sensorizingFunction = s.a.vsr.sf.uniform(
              sensors = [s.s.ar(); s.s.rv(a = 0); s.s.rv(a = 90); s.s.d(a = -90; r = 1)]
            );
            shape = s.a.vsr.s.biped(w = 4; h = 3)
          );
          function = ds.num.noised(inputSigma = 0.05; inner = ds.num.outStepped(stepT = 0.2; inner = er.ds.num.oGraphMRF(postOperator = tanh)));
          signals = 1
        ));
        nEval = 10000;
        nPop = 100
      );
      ea.s.multiSRTreeGP(
        mapper = er.m.treeParametrizedHomoBrains(target = s.a.distributedNumGridVSR(
          body = s.a.vsr.gridBody(
            sensorizingFunction = s.a.vsr.sf.uniform(
              sensors = [s.s.ar(); s.s.rv(a = 0); s.s.rv(a = 90); s.s.d(a = -90; r = 1)]
            );
            shape = s.a.vsr.s.biped(w = 4; h = 3)
          );
          function = ds.num.noised(inputSigma = 0.05; inner = ds.num.outStepped(stepT = 0.2; inner = er.ds.num.treeMRF(postOperator = tanh)));
          signals = 3
        ));
        nEval = 10000;
        nPop = 100;
        diversity = true
      );
      ea.s.numGA(
        mapper = er.m.numericalParametrizedHomoBrains(target = s.a.distributedNumGridVSR(
          body = s.a.vsr.gridBody(
            sensorizingFunction = s.a.vsr.sf.uniform(
              sensors = [s.s.ar(); s.s.rv(a = 0); s.s.rv(a = 90); s.s.d(a = -90; r = 1)]
            );
            shape = s.a.vsr.s.biped(w = 4; h = 3)
          );
          function = ds.num.noised(inputSigma = 0.05; inner = ds.num.outStepped(stepT = 0.2; inner = ds.num.mlp()));
          signals = 3
        ));
        nEval = 10000;
        nPop = 100
      );
      ea.s.oGraphea(
        mapper = er.m.oGraphParametrizedHomoBrains(target = s.a.distributedNumGridVSR(
          body = s.a.vsr.gridBody(
            sensorizingFunction = s.a.vsr.sf.uniform(
              sensors = [s.s.ar(); s.s.rv(a = 0); s.s.rv(a = 90); s.s.d(a = -90; r = 1)]
            );
            shape = s.a.vsr.s.biped(w = 4; h = 3)
          );
          function = ds.num.noised(inputSigma = 0.05; inner = ds.num.outStepped(stepT = 0.2; inner = er.ds.num.oGraphMRF(postOperator = tanh)));
          signals = 3
        ));
        nEval = 10000;
        nPop = 100
      )
    ]) * [
    ea.run(
      problem = ea.p.totalOrder(
        qFunction = s.taskRunner(task = s.task.locomotion(terrain = s.t.hilly(chunkH = 0.25)));
        cFunction = s.task.locomotion.xVelocity();
        type = maximize
      )
    )
  ];
  listeners = [
    ea.l.tui(
      functions = [
        ea.nf.size(f = ea.nf.genotype(individual = ea.nf.best()); s = "%5d");
        ea.nf.bestFitness(f = ea.nf.f(outerF = s.task.l.xVelocity(); s = "%5.2f"));
        ea.nf.fitnessHist(f = ea.nf.f(outerF = s.task.l.xVelocity()))
      ];
      plots = [
        ea.plot.fitness(x = ea.nf.progress(); f = ea.nf.f(outerF = s.task.l.xVelocity()); sort = max; minY = 0; maxX = 1)
      ]
    );
    ea.l.bestCsv(
      filePath = "best.csv";
      functions = [
        ea.nf.bestFitness(f = ea.nf.f(outerF = s.task.l.xVelocity(); s = "%5.2f"));
        ea.nf.size(f = ea.nf.genotype(individual = ea.nf.best()); s = "%5d")
      ];
      runKeys = ["solver.mapper.target.function.inner.inner"; "randomGenerator.seed"; "solver.mapper.target.signals"]
    );
    ea.l.telegram(
      chatId = "207490209";
      botIdFilePath = "../tlg.txt";
      plots = [
        ea.plot.fitness(f = ea.nf.f(outerF = s.task.l.xVelocity()); sort = max; minY = 0)
      ];
      accumulators = [
        er.video(
          task = s.task.locomotion(terrain = s.t.hilly(chunkH = 0.25));
          endTime = 30
        )
      ]
    );
    ea.l.net(
      serverKeyFilePath = "../server-key.txt";
      functions = [
        ea.nf.size(f = ea.nf.genotype(individual = ea.nf.best()); s = "%5d");
        ea.nf.bestFitness(f = ea.nf.f(outerF = s.task.l.xVelocity(); s = "%5.2f"));
        ea.nf.fitnessHist(f = ea.nf.f(outerF = s.task.l.xVelocity()))
      ];
      plots = [
        ea.plot.xyPlot(
          x = ea.nf.progress();
          y = ea.nf.bestFitness(f = ea.nf.f(outerF = s.task.l.xVelocity()));
          minX = 0;
          maxX = 1
        );
        ea.plot.xyPlot(
          x = ea.nf.progress();
          y = ea.nf.size(f = ea.nf.genotype(individual = ea.nf.best()));
          minX = 0;
          maxX = 1
        )
      ]
    );
    ea.l.outcomeSaver()
  ]
)
