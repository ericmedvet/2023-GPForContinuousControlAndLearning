ea.runOutcome(
  index = 5;
  run = ea.run(
    problem = ea.p.mr.fromData(
      trainingDataset = ea.dataset.numerical.fromFile(
        filePath = "../phase2/data-ro-ga-3-001.txt";
        folds = [0];
        nFolds = 50;
        xVarNamePattern = "x.*";
        yVarNamePattern = "y.*"
      )
    );
    randomGenerator = ea.rg.defaultRG(seed = 1);
    solver = ea.s.numGA(
      crossoverP = 0.8;
      initialMaxV = 1;
      initialMinV = -1;
      mapper = ea.m.mlpMRF(
        dataset = ea.d.num.empty(
          xVars = [
            x01;
            x02;
            x03;
            x04;
            x05;
            x06;
            x07;
            x08;
            x09;
            x10;
            x11;
            x12;
            x13;
            x14;
            x15;
            x16
          ];
          yVars = [y1; y2; y3; y4]
        );
        innerLayerRatio = 0.65;
        nOfInnerLayers = 1
      );
      minNTournament = 3;
      nEval = 10000;
      nPop = 100;
      sigmaMut = 0.35;
      tournamentRate = 0.05
    )
  );
  serializedGenotypes = [
    "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"
  ]
)