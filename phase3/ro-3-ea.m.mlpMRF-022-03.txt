ea.runOutcome(
  index = 22;
  run = ea.run(
    problem = ea.p.mr.fromData(
      trainingDataset = ea.dataset.numerical.fromFile(
        filePath = "../phase2/data-ro-ga-3-002.txt";
        folds = [0];
        nFolds = 40;
        xVarNamePattern = "x.*";
        yVarNamePattern = "y.*"
      )
    );
    randomGenerator = ea.rg.defaultRG(seed = 3);
    solver = ea.s.numGA(
      crossoverP = 0.8;
      initialMaxV = 1;
      initialMinV = -1;
      mapper = ea.m.mlpMRF(
        dataset = ea.d.num.empty(
          xVars = [
            x0;
            x1;
            x2;
            x3;
            x4;
            x5;
            x6;
            x7;
            x8;
            x9;
            x10;
            x11;
            x12;
            x13;
            x14;
            x15
          ];
          yVars = [y0; y1; y2; y3]
        );
        innerLayerRatio = 0.65;
        nOfInnerLayers = 1
      );
      minNTournament = 3;
      nEval = 10000;
      nPop = 100;
      sigmaMut = 0.35;
      tournamentRate = 0.05
    )
  );
  serializedGenotypes = [
    "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"
  ]
)