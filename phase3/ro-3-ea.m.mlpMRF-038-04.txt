ea.runOutcome(
  index = 38;
  run = ea.run(
    problem = ea.p.mr.fromData(
      trainingDataset = ea.dataset.numerical.fromFile(
        filePath = "../phase2/data-ro-ga-3-003.txt";
        folds = [0];
        nFolds = 50;
        xVarNamePattern = "x.*";
        yVarNamePattern = "y.*"
      )
    );
    randomGenerator = ea.rg.defaultRG(seed = 4);
    solver = ea.s.numGA(
      crossoverP = 0.8;
      initialMaxV = 1;
      initialMinV = -1;
      mapper = ea.m.mlpMRF(
        dataset = ea.d.num.empty(
          xVars = [
            x01;
            x02;
            x03;
            x04;
            x05;
            x06;
            x07;
            x08;
            x09;
            x10;
            x11;
            x12;
            x13;
            x14;
            x15;
            x16
          ];
          yVars = [y1; y2; y3; y4]
        );
        innerLayerRatio = 0.65;
        nOfInnerLayers = 1
      );
      minNTournament = 3;
      nEval = 10000;
      nPop = 100;
      sigmaMut = 0.35;
      tournamentRate = 0.05
    )
  );
  serializedGenotypes = [
    "rO0ABXNyABNqYXZhLnV0aWwuQXJyYXlMaXN0eIHSHZnHYZ0DAAFJAARzaXpleHAAAADWdwQAAADWc3IAEGphdmEubGFuZy5Eb3VibGWAs8JKKWv7BAIAAUQABXZhbHVleHIAEGphdmEubGFuZy5OdW1iZXKGrJUdC5TgiwIAAHhwP+FLyXxXtJFzcQB+AAK/59p9a8KtCHNxAH4AAkARP90LPPo9c3EAfgACv/t4Fgfr3RZzcQB+AAK/k2R1hu3OfXNxAH4AAj/q53b5MOnDc3EAfgACP9eh4/u+YHRzcQB+AAJADuOp+/EienNxAH4AAr/7aBxOaaHic3EAfgACv+a0Ig9uEmpzcQB+AAI/+YO03iZugHNxAH4AAsAK9BkYTyyxc3EAfgACP/7IF4iDazlzcQB+AAI/6KAU1fcNqXNxAH4AAkAB6zKl2P/Nc3EAfgACwAl+Izy8INZzcQB+AAK/50Jx4LneQnNxAH4AAr/cRRqfqM7Uc3EAfgACP84CFyHgH25zcQB+AAJADEcEtM7/gnNxAH4AAr/S0eQoinqmc3EAfgACP/8mgejA4EFzcQB+AAK//i4ZBr5I/3NxAH4AAsACEkezwIsJc3EAfgACP+GgYQejNBRzcQB+AAK/4R22d3Z0HXNxAH4AAr/QbHA5eh47c3EAfgACQBEskFLE0xJzcQB+AAJADIwAI+miZHNxAH4AAj/jGloF4pjmc3EAfgACv9qYgSCBxQtzcQB+AALABR8ZFDSIp3NxAH4AAj/iUQ9Y9gmoc3EAfgACwBEQ/zhLjI1zcQB+AAK/1xDw8Ce/TnNxAH4AAj/syCu/7GMVc3EAfgACP/t4tRgC+YpzcQB+AALAFNhPhcXQonNxAH4AAkAR1yoYFG0Mc3EAfgACv9FThOrvPodzcQB+AAJAHSXXl7eE03NxAH4AAr/tU0vDv70Dc3EAfgACwAfwKXEjQ15zcQB+AALAAwR+vPz/KnNxAH4AAsADN+jmt3Eic3EAfgACP+S++W38IihzcQB+AAJABL9oA1RdP3NxAH4AAr/p9SHHqZJZc3EAfgACQAqUWAKgfd5zcQB+AALAAx8/7LP24XNxAH4AAj/wSkOUaAIJc3EAfgACv7ut1BLLmpJzcQB+AAJAB7APeWvnGnNxAH4AAr/WHs6gxpyWc3EAfgACwAQ2IUj6/TlzcQB+AAK/0C6zMAENK3NxAH4AAr/3KvNM4Dzkc3EAfgACwAPyvgUC8ItzcQB+AALACrQ0Uktcb3NxAH4AAkAAG6B6MuC6c3EAfgACQAVTPa2Cvs1zcQB+AAJAAE7khtrfxXNxAH4AAsAGNKHKaxPgc3EAfgACP9Y2t5d60kJzcQB+AAI/8cTpdxPloXNxAH4AAsAGBIpclz99c3EAfgACP+Bn3rBezbpzcQB+AAK/9r/8MyqZMHNxAH4AAr+6V939GACdc3EAfgACP/PEjSkG6NxzcQB+AAK/7BquDJ65tHNxAH4AAkAJdo2EYRVMc3EAfgACv/qEwj8ASR9zcQB+AAK/rwlmi9lKGHNxAH4AAsAAph6/pxjpc3EAfgACwBTFtQ2CtI1zcQB+AAK/9gN33NjhPnNxAH4AAkABSElUUHYWc3EAfgACv+2AgeCZ6x5zcQB+AAJAAI78zkDg/HNxAH4AAj/xIXC7Tr0jc3EAfgACP9HoGdvSEANzcQB+AAI/2AKEUr4i2XNxAH4AAj/QvCKgDt8yc3EAfgACv/IdNwF4ws1zcQB+AAI/zA5ZaZLCFnNxAH4AAr/obUoS0sDgc3EAfgACP7YxL1Pgbm5zcQB+AAK/6p+M2Js7HnNxAH4AAsAQonl8NC+dc3EAfgACv/267yrCPbVzcQB+AAI/6iP+8wyL7XNxAH4AAj/jCaNASYRYc3EAfgACP+4cpSBbaMhzcQB+AAK/4GxO0U5bsHNxAH4AAj/M+vSL8y7Ic3EAfgACv99rq0Q3vDBzcQB+AAI/9G7zJngXQnNxAH4AAj/9WEG09cQ1c3EAfgACQAhZFOZqtftzcQB+AAK/qNsiqIDo4nNxAH4AAj//e/RgVwW+c3EAfgACP9By52c6zJlzcQB+AAK/2H6h0w13BnNxAH4AAr/lgksAYTTtc3EAfgACP/vEm9vKSC5zcQB+AAK/9PZgUJO1+HNxAH4AAj/nethPvm3Sc3EAfgACP+N5HkRe7clzcQB+AAK/6Y4bK9UA8XNxAH4AAsAPeATfkYHmc3EAfgACwAKxdaf1o/9zcQB+AALAEFgZNkRoxXNxAH4AAj/rcgcDSgE6c3EAfgACP/HMHZoVn2JzcQB+AAJAAhI8ZZHaeHNxAH4AAr/wowdlxSBEc3EAfgACP/C508Ei/PhzcQB+AAJABAU9YdiAMnNxAH4AAj/z+6NRiUBic3EAfgACP9W7riWaPvdzcQB+AAJAEqPhaml5qXNxAH4AAr/qTnRSoYCRc3EAfgACwAQ8NuyNYUpzcQB+AALAFgVwHI3bqXNxAH4AAsABlAdl4QJ5c3EAfgACv/vHogGQbpVzcQB+AAI/2tWawD4NZnNxAH4AAkAHhneCxJw8c3EAfgACwAihqFT+8/5zcQB+AAI/xg+DgNaiQ3NxAH4AAj/WFq4EtGcpc3EAfgACv/8/oUPt5dVzcQB+AALAABO1tKg9f3NxAH4AAsAOWxzFlI4wc3EAfgACwAD7L+YOxyxzcQB+AAK/z3AukmOpWnNxAH4AAr/z+cfYHtJKc3EAfgACP+y4eQM5goxzcQB+AALAFGxN3ygLG3NxAH4AAkAJ/X/4w5FGc3EAfgACv86PG+YHE/5zcQB+AAI//QM9gPQIzXNxAH4AAj/sRYP+h89Ec3EAfgACwAwgWwzLsTtzcQB+AAI/tBK66RDntHNxAH4AAkANGiDrJDF6c3EAfgACv9hTF13PAppzcQB+AAI/7ZqAAwEPJnNxAH4AAr/HDcWx4IXzc3EAfgACv+EWDRN44F5zcQB+AALAFCizowrJGnNxAH4AAr/TMCd8bllTc3EAfgACwAAKRABbhb5zcQB+AAK/8BHZ5Ogj2nNxAH4AAr/ivpp2oyx0c3EAfgACP8sQ/vEQcu9zcQB+AAJABk3O2kuSCHNxAH4AAr/cZ2nfXORbc3EAfgACv/utvozeEq1zcQB+AALAAhFOxmO92nNxAH4AAr/sb7RiAZkgc3EAfgACv8uS41yF4AxzcQB+AAI/9v7S+UGgJHNxAH4AAj/4jOvVUSRTc3EAfgACv/SkFkLvpUBzcQB+AAI/07iFrhJi2HNxAH4AAr//7EtWmV61c3EAfgACP/vdNt72NOpzcQB+AALAC0KHA+j573NxAH4AAkABRWURh9Sjc3EAfgACQBfdy4WTjzdzcQB+AAK/6Ksdw2Lqj3NxAH4AAkANnDWkUORPc3EAfgACP/GxM59x0I9zcQB+AAK/4qrC440iznNxAH4AAj/9+sUfy/pEc3EAfgACv9tfuqeYP1tzcQB+AALABe6eOjFht3NxAH4AAj/9Wq0+XxSbc3EAfgACP+Cd201ntmpzcQB+AAK/7XAM5r8ye3NxAH4AAj/U3oDvChkFc3EAfgACQAsRdpzc8XxzcQB+AALACKBbGqxhpHNxAH4AAj/rE8170QFIc3EAfgACQAMdpr840HZzcQB+AAK/+IVOohWHTnNxAH4AAj+zCe8r5zoQc3EAfgACP90z+aMnFWZzcQB+AAI/stxY5QnJoXNxAH4AAsAPrX6pCCy1c3EAfgACv/bwuYnGmMhzcQB+AALAArRRNdEEJXNxAH4AAj+xpkrAlwK8c3EAfgACv9WZwlcM0lFzcQB+AAI/7kpYMr5Y+HNxAH4AAkAP+4bEKyx4c3EAfgACwAK+rsX90JxzcQB+AAI//LDrl6VnH3NxAH4AAr/whdxWKpx9c3EAfgACv/6rco/yGEhzcQB+AAI/6aeNiP3h7XNxAH4AAj/xyWilCCcoc3EAfgACv9cw1x06EMxzcQB+AAJAELwDDHsk+XNxAH4AAsAOYppTfgTZc3EAfgACP5fBrGL8K+BzcQB+AAK/9U/RdVLi+HNxAH4AAr/i1zaeTFgic3EAfgACP/HPuOg8JpVzcQB+AAI/+xhfaSXcq3NxAH4AAr/M5EgAUTzfc3EAfgACP/HjXmSUocV4"
  ]
)