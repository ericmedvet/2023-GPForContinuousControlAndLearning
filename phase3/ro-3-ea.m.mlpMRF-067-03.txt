ea.runOutcome(
  index = 67;
  run = ea.run(
    problem = ea.p.mr.fromData(
      trainingDataset = ea.dataset.numerical.fromFile(
        filePath = "../phase2/data-ro-ga-3-005.txt";
        folds = [0];
        nFolds = 40;
        xVarNamePattern = "x.*";
        yVarNamePattern = "y.*"
      )
    );
    randomGenerator = ea.rg.defaultRG(seed = 3);
    solver = ea.s.numGA(
      crossoverP = 0.8;
      initialMaxV = 1;
      initialMinV = -1;
      mapper = ea.m.mlpMRF(
        dataset = ea.d.num.empty(
          xVars = [
            x0;
            x1;
            x2;
            x3;
            x4;
            x5;
            x6;
            x7;
            x8;
            x9;
            x10;
            x11;
            x12;
            x13;
            x14;
            x15
          ];
          yVars = [y0; y1; y2; y3]
        );
        innerLayerRatio = 0.65;
        nOfInnerLayers = 1
      );
      minNTournament = 3;
      nEval = 10000;
      nPop = 100;
      sigmaMut = 0.35;
      tournamentRate = 0.05
    )
  );
  serializedGenotypes = [
    "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"
  ]
)