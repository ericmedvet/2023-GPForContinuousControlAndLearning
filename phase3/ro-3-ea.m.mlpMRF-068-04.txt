ea.runOutcome(
  index = 68;
  run = ea.run(
    problem = ea.p.mr.fromData(
      trainingDataset = ea.dataset.numerical.fromFile(
        filePath = "../phase2/data-ro-ga-3-005.txt";
        folds = [0];
        nFolds = 40;
        xVarNamePattern = "x.*";
        yVarNamePattern = "y.*"
      )
    );
    randomGenerator = ea.rg.defaultRG(seed = 4);
    solver = ea.s.numGA(
      crossoverP = 0.8;
      initialMaxV = 1;
      initialMinV = -1;
      mapper = ea.m.mlpMRF(
        dataset = ea.d.num.empty(
          xVars = [
            x0;
            x1;
            x2;
            x3;
            x4;
            x5;
            x6;
            x7;
            x8;
            x9;
            x10;
            x11;
            x12;
            x13;
            x14;
            x15
          ];
          yVars = [y0; y1; y2; y3]
        );
        innerLayerRatio = 0.65;
        nOfInnerLayers = 1
      );
      minNTournament = 3;
      nEval = 10000;
      nPop = 100;
      sigmaMut = 0.35;
      tournamentRate = 0.05
    )
  );
  serializedGenotypes = [
    "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"
  ]
)