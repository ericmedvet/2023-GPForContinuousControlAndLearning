ea.runOutcome(
  index = 96;
  run = ea.run(
    problem = ea.p.mr.fromData(
      trainingDataset = ea.dataset.numerical.fromFile(
        filePath = "../phase2/data-ro-ga-3-007.txt";
        folds = [0];
        nFolds = 50;
        xVarNamePattern = "x.*";
        yVarNamePattern = "y.*"
      )
    );
    randomGenerator = ea.rg.defaultRG(seed = 2);
    solver = ea.s.numGA(
      crossoverP = 0.8;
      initialMaxV = 1;
      initialMinV = -1;
      mapper = ea.m.mlpMRF(
        dataset = ea.d.num.empty(
          xVars = [
            x01;
            x02;
            x03;
            x04;
            x05;
            x06;
            x07;
            x08;
            x09;
            x10;
            x11;
            x12;
            x13;
            x14;
            x15;
            x16
          ];
          yVars = [y1; y2; y3; y4]
        );
        innerLayerRatio = 0.65;
        nOfInnerLayers = 1
      );
      minNTournament = 3;
      nEval = 10000;
      nPop = 100;
      sigmaMut = 0.35;
      tournamentRate = 0.05
    )
  );
  serializedGenotypes = [
    "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"
  ]
)