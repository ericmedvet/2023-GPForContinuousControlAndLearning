ea.runOutcome(
  index = 97;
  run = ea.run(
    problem = ea.p.mr.fromData(
      trainingDataset = ea.dataset.numerical.fromFile(
        filePath = "../phase2/data-ro-ga-3-007.txt";
        folds = [0];
        nFolds = 40;
        xVarNamePattern = "x.*";
        yVarNamePattern = "y.*"
      )
    );
    randomGenerator = ea.rg.defaultRG(seed = 3);
    solver = ea.s.numGA(
      crossoverP = 0.8;
      initialMaxV = 1;
      initialMinV = -1;
      mapper = ea.m.mlpMRF(
        dataset = ea.d.num.empty(
          xVars = [
            x0;
            x1;
            x2;
            x3;
            x4;
            x5;
            x6;
            x7;
            x8;
            x9;
            x10;
            x11;
            x12;
            x13;
            x14;
            x15
          ];
          yVars = [y0; y1; y2; y3]
        );
        innerLayerRatio = 0.65;
        nOfInnerLayers = 1
      );
      minNTournament = 3;
      nEval = 10000;
      nPop = 100;
      sigmaMut = 0.35;
      tournamentRate = 0.05
    )
  );
  serializedGenotypes = [
    "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"
  ]
)