ea.runOutcome(
  index = 126;
  run = ea.run(
    problem = ea.p.mr.fromData(
      trainingDataset = ea.dataset.numerical.fromFile(
        filePath = "../phase2/data-ro-ga-3-009.txt";
        folds = [0];
        nFolds = 40;
        xVarNamePattern = "x.*";
        yVarNamePattern = "y.*"
      )
    );
    randomGenerator = ea.rg.defaultRG(seed = 2);
    solver = ea.s.numGA(
      crossoverP = 0.8;
      initialMaxV = 1;
      initialMinV = -1;
      mapper = ea.m.mlpMRF(
        dataset = ea.d.num.empty(
          xVars = [
            x0;
            x1;
            x2;
            x3;
            x4;
            x5;
            x6;
            x7;
            x8;
            x9;
            x10;
            x11;
            x12;
            x13;
            x14;
            x15
          ];
          yVars = [y0; y1; y2; y3]
        );
        innerLayerRatio = 0.65;
        nOfInnerLayers = 1
      );
      minNTournament = 3;
      nEval = 10000;
      nPop = 100;
      sigmaMut = 0.35;
      tournamentRate = 0.05
    )
  );
  serializedGenotypes = [
    "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"
  ]
)