ea.runOutcome(
  index = 129;
  run = ea.run(
    problem = ea.p.mr.fromData(
      trainingDataset = ea.dataset.numerical.fromFile(
        filePath = "../phase2/data-ro-ga-3-009.txt";
        folds = [0];
        nFolds = 40;
        xVarNamePattern = "x.*";
        yVarNamePattern = "y.*"
      )
    );
    randomGenerator = ea.rg.defaultRG(seed = 5);
    solver = ea.s.numGA(
      crossoverP = 0.8;
      initialMaxV = 1;
      initialMinV = -1;
      mapper = ea.m.mlpMRF(
        dataset = ea.d.num.empty(
          xVars = [
            x0;
            x1;
            x2;
            x3;
            x4;
            x5;
            x6;
            x7;
            x8;
            x9;
            x10;
            x11;
            x12;
            x13;
            x14;
            x15
          ];
          yVars = [y0; y1; y2; y3]
        );
        innerLayerRatio = 0.65;
        nOfInnerLayers = 1
      );
      minNTournament = 3;
      nEval = 10000;
      nPop = 100;
      sigmaMut = 0.35;
      tournamentRate = 0.05
    )
  );
  serializedGenotypes = [
    "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"
  ]
)