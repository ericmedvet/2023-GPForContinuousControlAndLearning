ea.runOutcome(
  index = 141;
  run = ea.run(
    problem = ea.p.mr.fromData(
      trainingDataset = ea.dataset.numerical.fromFile(
        filePath = "../phase2/data-ro-ga-3-010.txt";
        folds = [0];
        nFolds = 40;
        xVarNamePattern = "x.*";
        yVarNamePattern = "y.*"
      )
    );
    randomGenerator = ea.rg.defaultRG(seed = 2);
    solver = ea.s.numGA(
      crossoverP = 0.8;
      initialMaxV = 1;
      initialMinV = -1;
      mapper = ea.m.mlpMRF(
        dataset = ea.d.num.empty(
          xVars = [
            x0;
            x1;
            x2;
            x3;
            x4;
            x5;
            x6;
            x7;
            x8;
            x9;
            x10;
            x11;
            x12;
            x13;
            x14;
            x15
          ];
          yVars = [y0; y1; y2; y3]
        );
        innerLayerRatio = 0.65;
        nOfInnerLayers = 1
      );
      minNTournament = 3;
      nEval = 10000;
      nPop = 100;
      sigmaMut = 0.35;
      tournamentRate = 0.05
    )
  );
  serializedGenotypes = [
    "rO0ABXNyABNqYXZhLnV0aWwuQXJyYXlMaXN0eIHSHZnHYZ0DAAFJAARzaXpleHAAAADWdwQAAADWc3IAEGphdmEubGFuZy5Eb3VibGWAs8JKKWv7BAIAAUQABXZhbHVleHIAEGphdmEubGFuZy5OdW1iZXKGrJUdC5TgiwIAAHhwv+DW/rEI1/FzcQB+AAI/508eQAbLgHNxAH4AAj/0fbAFiiOec3EAfgACv/Mh81EMwfpzcQB+AAK/5+v1BI8TZ3NxAH4AAj/7ObL/Is+Cc3EAfgACP+BThIKjppJzcQB+AAK/5sI/NLZNjHNxAH4AAr/7BkJ2wQp+c3EAfgACv4WJymUNpgBzcQB+AAI/9WFCZiKWNnNxAH4AAsAGhCJz0FRzc3EAfgACP9W7b9VTn2lzcQB+AAI/8iIrzat7jHNxAH4AAsAArxhNED2Lc3EAfgACP+90PiVhS8xzcQB+AALABSaq8GP323NxAH4AAr/sNoWJibsSc3EAfgACv/K1vDMQK4xzcQB+AAI/xjlHyDbb53NxAH4AAj/xmL0ZgeFqc3EAfgACv/WT/4eCPypzcQB+AAI/7i/MGipUwXNxAH4AAr/bqUpwXAqQc3EAfgACwAGkKoxTpdRzcQB+AAK/85VIcQRAOnNxAH4AAj/ZAp4sn/gec3EAfgACv8BDBvzI3zlzcQB+AAK/5MNwfgYxqnNxAH4AAj/VjQJ0H3+ac3EAfgACv8gVw/2MD3lzcQB+AAI/wNkBsAu0sXNxAH4AAr/0eqLA9j2Dc3EAfgACv/zvR2CyqFRzcQB+AAK/7C9x1CnS2HNxAH4AAr//kcTVxeCAc3EAfgACP/IE/7lJtphzcQB+AALAA5t5NRDuPnNxAH4AAj/8uQHnYg+Qc3EAfgACwAVTEZJ5h2JzcQB+AAK/8Bro+il/eXNxAH4AAr+mNToRnHeEc3EAfgACv9wt9PGGNaNzcQB+AAK/12Q1kdza8nNxAH4AAsAAFActwh+yc3EAfgACP+Sm0i6K1whzcQB+AAI/7uHE3kqZonNxAH4AAr/hkgJyjsp1c3EAfgACP912kkWHsYJzcQB+AAK/4amIaROQyXNxAH4AAr/27rzfjyTwc3EAfgACP9cfz4OA1IBzcQB+AAK/05HUsPTGcnNxAH4AAj/x/LAv9Gtkc3EAfgACP/RWBZzOmXZzcQB+AAI/0Q1n+sgxp3NxAH4AAj/Lv1dXs0h4c3EAfgACP/yGTvSFIqxzcQB+AAI/603ElfjUrnNxAH4AAkABvI03rZb7c3EAfgACP+TaOXeHrLlzcQB+AAI//MI4oQbKZ3NxAH4AAr/FqDrueWcXc3EAfgACP+FUw1FfXqtzcQB+AAJAAUxamOisfnNxAH4AAj/Vde6qCpEsc3EAfgACv+DM9eewOrpzcQB+AAK/2J9VogDscHNxAH4AAr/B3HU2t69wc3EAfgACP+SpsWEQ8jJzcQB+AAI/4gwF1hXjMHNxAH4AAr/yjAAh+qcGc3EAfgACP+FEnnF8V0RzcQB+AAK/6EH1tMqEQXNxAH4AAj/v0W7L4+eyc3EAfgACv9XtiTktbOFzcQB+AAI/4ScTRdXDcnNxAH4AAj/302ulIACvc3EAfgACv+hzrSRidmRzcQB+AAI/4dC/swB9yXNxAH4AAr+V0jfK6Aqoc3EAfgACv/RH8U2Lis9zcQB+AAJADnEGpKXZqHNxAH4AAj/E5cH2J2BTc3EAfgACP+LDTIb2E5BzcQB+AAK/5lBPFYty5HNxAH4AAj/d0Uhgmauwc3EAfgACQAbi5XdOZy5zcQB+AAK/+zfpY6k+Y3NxAH4AAj/wTJGWSiUAc3EAfgACv+6ArWjaWONzcQB+AAK/6jAZ0zRshXNxAH4AAj/SUT0Gj+Hqc3EAfgACP/TMa5tiPaZzcQB+AAI//vfwxLRJTHNxAH4AAj/LYRSzQtGmc3EAfgACv8CNQOGDpihzcQB+AAK/6cjygvXAR3NxAH4AAr/vrrR3/8tWc3EAfgACP/Zjr5eAXY9zcQB+AAK/5ds+ABOUh3NxAH4AAr/1+1r2jWJYc3EAfgACP/O04A3ZwcRzcQB+AAI/7icLZYOIE3NxAH4AAr/F78vw27rEc3EAfgACP/F09WKy3P9zcQB+AAK/+u3sH6eu63NxAH4AAr/9wmnaR9auc3EAfgACwBD5Egh1pktzcQB+AAI/1YJ4QoOTt3NxAH4AAj/TYrYgAYdec3EAfgACv/6SIENoRyVzcQB+AALABK99nUNLWnNxAH4AAj/i+DTD387tc3EAfgACv/FfOuIBPxNzcQB+AAK///7Ly+euH3NxAH4AAj/x0/ptws41c3EAfgACv5QO1iPU1fxzcQB+AAI/z2PjqmIKTHNxAH4AAj/2mJBV3Nvbc3EAfgACwALzPm3k5+FzcQB+AAI/wDZGpGWNPnNxAH4AAkAA5iJAftYLc3EAfgACv5KLlbMIDBBzcQB+AAK/9T3hZnHKjHNxAH4AAkAAEqg4kmwJc3EAfgACP/y8Rcs7XhpzcQB+AAK/3F1wmEWPyHNxAH4AAr/joaf2KHF2c3EAfgACv+JC7xwHvwhzcQB+AAK/8tBmAfcpp3NxAH4AAj/aYwrq+mnIc3EAfgACv/HoZ0oSheJzcQB+AAK/2VPWjcDu6HNxAH4AAj/nt4K/50B8c3EAfgACP9cw/cTiI0xzcQB+AAK/8Kh1KPowyHNxAH4AAr/Y92aWiPfmc3EAfgACP+JqfgAgnhRzcQB+AAI/1AcsIJpJl3NxAH4AAj/yKDxBt4TPc3EAfgACv+++AeAGYqpzcQB+AALAACvvFUfUmHNxAH4AAj/bBuh0LFKtc3EAfgACv/aB02ie9DJzcQB+AAK/2ywcFLdwkXNxAH4AAr/GssME6xxvc3EAfgACv7iKS3hhzK5zcQB+AALAAFlefkwHJXNxAH4AAr+7+zTyDgIgc3EAfgACv8cLojq59bZzcQB+AALAB3OtIl0SYHNxAH4AAj/yk0f9nMOnc3EAfgACv+uRKZWWt7VzcQB+AAK/8uGid6tMO3NxAH4AAr/DfU1y0Nlpc3EAfgACP6lU6sbfdShzcQB+AAI/8ErszFLmvHNxAH4AAr+xQnuSh/Vcc3EAfgACP/MHw8PyMTtzcQB+AAK/uS361LytRHNxAH4AAj/s2gIVv2UGc3EAfgACP/+/UtGUWrJzcQB+AAI/9ehZsAmY73NxAH4AAr/TGVEz2aokc3EAfgACwAW5e2a0/VJzcQB+AALAAfqTU8QcOXNxAH4AAr/1qrFb/VZ3c3EAfgACv9w4y1VFYDpzcQB+AAI/p5oBqaC/EnNxAH4AAr/4+m4S5RWuc3EAfgACQAFVgLE1A7RzcQB+AAK/vnOxXP9aOHNxAH4AAr/l7axX0Blyc3EAfgACP8HqZrIPMYRzcQB+AAK/jWelAHtBkHNxAH4AAr/gom+GFsb0c3EAfgACv9jIdJSV/2VzcQB+AAK/3BfdnFekvnNxAH4AAj/8cT9jzV3Yc3EAfgACP7k8BpNy3B5zcQB+AAI/9SczdylW/HNxAH4AAr/P35Jo1V5mc3EAfgACv9KeLp/lOD5zcQB+AAI/7lF3r4YH+XNxAH4AAr/UFos6ar+Ac3EAfgACwACyJH5TeGBzcQB+AAI/+wQfw9FPSXNxAH4AAkABH/gVxAkHc3EAfgACv9PqQU3NQalzcQB+AAK/vS0gV6iianNxAH4AAr/w8fwtfSuJc3EAfgACv/C/ZiPC8EJzcQB+AAK/r0lDtypPl3NxAH4AAr/zGcv8eajdc3EAfgACP/QyH4yTXy9zcQB+AAK/tP5yVZHAOHNxAH4AAr/wg2Vb9nV6c3EAfgACv+oy+bRb5tFzcQB+AAJAAnAAHW6iC3NxAH4AAr/wdFgEGBC4c3EAfgACP/UizwSdLhxzcQB+AAK/vBqcOe/k/HNxAH4AAj/x+vCxNND4c3EAfgACP/jTfc5beE5zcQB+AAI//qkhBXCBEXNxAH4AAj/U/K5+TdPyc3EAfgACP9n988LM3ThzcQB+AAK/9bXf7EtVznNxAH4AAj/M/OyNMWM/c3EAfgACwAReiDbxfGhzcQB+AALAEcF3oS/0U3NxAH4AAr+az6aihqSgc3EAfgACP7fsug/73jB4"
  ]
)