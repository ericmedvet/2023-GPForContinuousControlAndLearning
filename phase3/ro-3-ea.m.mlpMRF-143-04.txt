ea.runOutcome(
  index = 143;
  run = ea.run(
    problem = ea.p.mr.fromData(
      trainingDataset = ea.dataset.numerical.fromFile(
        filePath = "../phase2/data-ro-ga-3-010.txt";
        folds = [0];
        nFolds = 40;
        xVarNamePattern = "x.*";
        yVarNamePattern = "y.*"
      )
    );
    randomGenerator = ea.rg.defaultRG(seed = 4);
    solver = ea.s.numGA(
      crossoverP = 0.8;
      initialMaxV = 1;
      initialMinV = -1;
      mapper = ea.m.mlpMRF(
        dataset = ea.d.num.empty(
          xVars = [
            x0;
            x1;
            x2;
            x3;
            x4;
            x5;
            x6;
            x7;
            x8;
            x9;
            x10;
            x11;
            x12;
            x13;
            x14;
            x15
          ];
          yVars = [y0; y1; y2; y3]
        );
        innerLayerRatio = 0.65;
        nOfInnerLayers = 1
      );
      minNTournament = 3;
      nEval = 10000;
      nPop = 100;
      sigmaMut = 0.35;
      tournamentRate = 0.05
    )
  );
  serializedGenotypes = [
    "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"
  ]
)