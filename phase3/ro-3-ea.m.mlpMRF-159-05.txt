ea.runOutcome(
  index = 159;
  run = ea.run(
    problem = ea.p.mr.fromData(
      trainingDataset = ea.dataset.numerical.fromFile(
        filePath = "../phase2/data-ro-ga-3-001.txt";
        folds = [0];
        nFolds = 40;
        xVarNamePattern = "x.*";
        yVarNamePattern = "y.*"
      )
    );
    randomGenerator = ea.rg.defaultRG(seed = 5);
    solver = ea.s.numGA(
      crossoverP = 0.8;
      initialMaxV = 1;
      initialMinV = -1;
      mapper = ea.m.mlpMRF(
        dataset = ea.d.num.empty(
          xVars = [
            x0;
            x1;
            x2;
            x3;
            x4;
            x5;
            x6;
            x7;
            x8;
            x9;
            x10;
            x11;
            x12;
            x13;
            x14;
            x15
          ];
          yVars = [y0; y1; y2; y3]
        );
        innerLayerRatio = 0.65;
        nOfInnerLayers = 1
      );
      minNTournament = 3;
      nEval = 10000;
      nPop = 100;
      sigmaMut = 0.35;
      tournamentRate = 0.05
    )
  );
  serializedGenotypes = [
    "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"
  ]
)