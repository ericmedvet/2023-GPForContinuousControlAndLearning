ea.runOutcome(
  index = 170;
  run = ea.run(
    problem = ea.p.mr.fromData(
      trainingDataset = ea.dataset.numerical.fromFile(
        filePath = "../phase2/data-ro-gp-3-002.txt";
        folds = [0];
        nFolds = 40;
        xVarNamePattern = "x.*";
        yVarNamePattern = "y.*"
      )
    );
    randomGenerator = ea.rg.defaultRG(seed = 1);
    solver = ea.s.numGA(
      crossoverP = 0.8;
      initialMaxV = 1;
      initialMinV = -1;
      mapper = ea.m.mlpMRF(
        dataset = ea.d.num.empty(
          xVars = [
            x0;
            x1;
            x2;
            x3;
            x4;
            x5;
            x6;
            x7;
            x8;
            x9;
            x10;
            x11;
            x12;
            x13;
            x14;
            x15
          ];
          yVars = [y0; y1; y2; y3]
        );
        innerLayerRatio = 0.65;
        nOfInnerLayers = 1
      );
      minNTournament = 3;
      nEval = 10000;
      nPop = 100;
      sigmaMut = 0.35;
      tournamentRate = 0.05
    )
  );
  serializedGenotypes = [
    "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"
  ]
)