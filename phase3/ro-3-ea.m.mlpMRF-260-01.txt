ea.runOutcome(
  index = 260;
  run = ea.run(
    problem = ea.p.mr.fromData(
      trainingDataset = ea.dataset.numerical.fromFile(
        filePath = "../phase2/data-ro-gp-3-008.txt";
        folds = [0];
        nFolds = 40;
        xVarNamePattern = "x.*";
        yVarNamePattern = "y.*"
      )
    );
    randomGenerator = ea.rg.defaultRG(seed = 1);
    solver = ea.s.numGA(
      crossoverP = 0.8;
      initialMaxV = 1;
      initialMinV = -1;
      mapper = ea.m.mlpMRF(
        dataset = ea.d.num.empty(
          xVars = [
            x0;
            x1;
            x2;
            x3;
            x4;
            x5;
            x6;
            x7;
            x8;
            x9;
            x10;
            x11;
            x12;
            x13;
            x14;
            x15
          ];
          yVars = [y0; y1; y2; y3]
        );
        innerLayerRatio = 0.65;
        nOfInnerLayers = 1
      );
      minNTournament = 3;
      nEval = 10000;
      nPop = 100;
      sigmaMut = 0.35;
      tournamentRate = 0.05
    )
  );
  serializedGenotypes = [
    "rO0ABXNyABNqYXZhLnV0aWwuQXJyYXlMaXN0eIHSHZnHYZ0DAAFJAARzaXpleHAAAADWdwQAAADWc3IAEGphdmEubGFuZy5Eb3VibGWAs8JKKWv7BAIAAUQABXZhbHVleHIAEGphdmEubGFuZy5OdW1iZXKGrJUdC5TgiwIAAHhwv/S+FnZi0G5zcQB+AAI/9GH9t1BCdHNxAH4AAr/OyTfWVd4ec3EAfgACP/AoHGD3Vd1zcQB+AAK/6CEtCdKalHNxAH4AAr/rbb9df+ifc3EAfgACv40TbbKW+4BzcQB+AAK/6e041D2obHNxAH4AAr/iNSrUNksmc3EAfgACP+43lh8kV/dzcQB+AAI/5WNQdm3MtnNxAH4AAj/w6dRpA9XAc3EAfgACP9hTYblzgt1zcQB+AAI/8DeFyXn2eHNxAH4AAr/lRcfOzd+0c3EAfgACP/ZuUKxmppZzcQB+AAK/w9vmVFKaAXNxAH4AAsAAropsbmAUc3EAfgACQAb+3NeRlQxzcQB+AAI/3kldjd8ieHNxAH4AAr/z55JrUwiDc3EAfgACv+iIDG0xi1JzcQB+AAK/75S5b2EK4nNxAH4AAsAK/d6k4aP6c3EAfgACP9KaDnPRgxNzcQB+AAK/uyO3tQDo0HNxAH4AAj/7Z1sFfZ2Uc3EAfgACP/f1dBuXm8BzcQB+AAK/01RaF/DDl3NxAH4AAr/7yCUaokjic3EAfgACP9aRqwc56LBzcQB+AAI/sYuNLIBbYnNxAH4AAr/2NB38Ftf0c3EAfgACP/hUOR3H4xBzcQB+AAK/+QfiMTmXW3NxAH4AAkADHXPzAB0Xc3EAfgACP94cxLDcV9pzcQB+AAK/73PkFnUKT3NxAH4AAj/MvqhjU83Ac3EAfgACP996yZ7JozlzcQB+AAK/+EUQZ9/rlHNxAH4AAr/nW1u7gCVvc3EAfgACv9Ym4cnV40dzcQB+AAK/8Icy4TkEM3NxAH4AAj/8WBfBw4lmc3EAfgACv+xodCSOVOlzcQB+AAI/5kjG5SzULXNxAH4AAsACQ/oEhrY/c3EAfgACP+XPyQYJF+BzcQB+AAK/9lq1Pkq7I3NxAH4AAj/zuiovmbwOc3EAfgACP7Uk4kbaP/hzcQB+AAI/2eMumwmM8XNxAH4AAr/WYR/cIt47c3EAfgACP83EhEwiXEBzcQB+AAK/4XQXmrzXpHNxAH4AAj/u5gc/1rWvc3EAfgACwAjDhOJ7W85zcQB+AAK/8cGUKDP2T3NxAH4AAj/0B2/klHCpc3EAfgACP3lbDsVExUxzcQB+AAI/7+YacFaDqXNxAH4AAsAAM+DoaVBOc3EAfgACP+cSijyBEaZzcQB+AAK/skvzCHcUSnNxAH4AAr/6PZ91Y5zsc3EAfgACP8isPlLgKUZzcQB+AAI/8gHAbPWgOnNxAH4AAr/TSN/3hwyEc3EAfgACv/vw5tGsQG5zcQB+AAI/1FcZnZZAh3NxAH4AAsAAQKcA3NyFc3EAfgACv73BZwFtN/BzcQB+AAI/7WsqYVtCenNxAH4AAr/2JlOJ9afIc3EAfgACv+dEoxFz1bxzcQB+AAK/+gxV4lu73XNxAH4AAj/xkKsA9Y0pc3EAfgACP+tV9EiuNpBzcQB+AAJAAGUCWiYMmXNxAH4AAr/7p7soOKGoc3EAfgACP8YmcehSU3RzcQB+AAK/7juTFhVfRnNxAH4AAr+AYWeJKRioc3EAfgACv4tzwRfrm0pzcQB+AAI/6qZOQiYkWXNxAH4AAr/2mITUemX2c3EAfgACP8LaTXuwusZzcQB+AAK/8wC75M8a5HNxAH4AAr/2OYq/Jerpc3EAfgACP+OQt9qSXsVzcQB+AAI/xfbUJhCPOXNxAH4AAr/sprHGV6xQc3EAfgACv/9BB6sgdSNzcQB+AAI/5xOZjE4jWnNxAH4AAj/zS0PvTeCtc3EAfgACP8tsWyefuzRzcQB+AAK/7/ZEWoS/TXNxAH4AAj/5lHpuTK7Rc3EAfgACv7Mn4nPSWSBzcQB+AAK/+HPlK1zrT3NxAH4AAj/oe9yk/89Dc3EAfgACP+TnGJS1Pr5zcQB+AAI/2nGiYsI4U3NxAH4AAj+ydXtww8mgc3EAfgACP/Xvb+f6dAhzcQB+AAK/9s+nQUShbHNxAH4AAj/a1sTNepa4c3EAfgACP/KW6Dy+rMhzcQB+AAI/4czDxEeecnNxAH4AAkABD70mCRDxc3EAfgACv9F1k0IZxfhzcQB+AAJAAA69RifwJHNxAH4AAj/wcJsAmiH6c3EAfgACv/WIKnV48QlzcQB+AALACeCN4Ui6a3NxAH4AAj/ysY+LlLrtc3EAfgACP/O6z6NGehVzcQB+AAK/41LZ4nzx7nNxAH4AAr/sS4MnFQQxc3EAfgACv+EZXoHPcZJzcQB+AAI/4b9xSZaVVHNxAH4AAj/x5FwBGz57c3EAfgACv+M3koGvwORzcQB+AAK/ugVEUfJ/33NxAH4AAr/zMbqGXwwnc3EAfgACP+1kV9XRWapzcQB+AAK/ysyv8SrwUXNxAH4AAr/k7s9dJeHfc3EAfgACv7mV11QoEA5zcQB+AAI/8mpxZbyJM3NxAH4AAj/7ZMyCSU/lc3EAfgACP6kNvHyL3o9zcQB+AAK/3LPlU0Kl23NxAH4AAr+2RxveYjX0c3EAfgACP+dCGxhIXIZzcQB+AALAAZQB3G5kinNxAH4AAj/q3iIzt/amc3EAfgACv3D8nD3i6ABzcQB+AAI/8vRhW0b+IHNxAH4AAj/CXCBvLvSOc3EAfgACQARRK+1DsbFzcQB+AAK/+wPFc6gd2HNxAH4AAj/DhNwWCZnSc3EAfgACv3YBmVOOJ6BzcQB+AALAA41IwSggKXNxAH4AAj/hQYSvx+qyc3EAfgACP+ExrVLjNOlzcQB+AAK/wIMlM8sxpnNxAH4AAj/26ttjHBq2c3EAfgACP9IEOr+l/lBzcQB+AAI/8SyVxR3VLXNxAH4AAsADChnlr1R+c3EAfgACP+tEVz1znE9zcQB+AAK//kGvvjWM3HNxAH4AAr/kioaALdRSc3EAfgACP9CwOAYIQsBzcQB+AAI/vTgp51dGpnNxAH4AAr/6yaoEexbBc3EAfgACv2UkHF45QABzcQB+AAI/22Y0/U7fxHNxAH4AAj/rY59IxYWZc3EAfgACwA75gRvd4kVzcQB+AAJAAGoxeg0n13NxAH4AAr/Jc6+DeGBMc3EAfgACP/wFOoshqLlzcQB+AALAA++2OmB91XNxAH4AAr/gsLQ6TUqOc3EAfgACv/btfyO5ODRzcQB+AAK/4T3kWR5j+nNxAH4AAr/wjD0uZwb6c3EAfgACP/33+nwHFspzcQB+AALAAJml/dmcgXNxAH4AAr/h33uw5O1ac3EAfgACP/hY+S/wjdFzcQB+AALAAhXk8g+JTnNxAH4AAr/9v05Ne9NUc3EAfgACP/Rq+gUJt79zcQB+AAI/47rWByiHonNxAH4AAj/aGeFn+avyc3EAfgACv/iJbICsKdhzcQB+AAK/7XtADMWlfnNxAH4AAkAFrdqNmdyDc3EAfgACwAEWdihhUwRzcQB+AAK/5sJ1Cb+QMHNxAH4AAr/XWD54qbhic3EAfgACP9PK9wolxa1zcQB+AAK/z3/xIU/uc3NxAH4AAr/mrQOBMI9Uc3EAfgACP+XAJzrsnMlzcQB+AALAAbUReo1Gu3NxAH4AAr/D1vg4KhFDc3EAfgACP66OqTXEe9BzcQB+AAI/8+7rK9lJQHNxAH4AAsAJd2P+t+Bbc3EAfgACv72qeEKpcwhzcQB+AALABYP5kkvxTHNxAH4AAr+7p8lfmx3sc3EAfgACv/fGvwtb8QVzcQB+AAK/1EQb8mW1q3NxAH4AAj/XBcSXmXpbc3EAfgACP9EBGphPSxRzcQB+AAI/5bVNC0+nInNxAH4AAj/PTt+unM3cc3EAfgACP+cl088NtHJzcQB+AAK/5SxQFJ7eKHNxAH4AAj/FYKxQnpj2c3EAfgACP+kxIjP92zxzcQB+AAI/whCcZ9GtDnNxAH4AAj/UcJBhD2i8c3EAfgACv+o8OnxzN65zcQB+AAK/47lx4aDhWHNxAH4AAr/yBueUqxlzc3EAfgACP7FaLN8mkYB4"
  ]
)