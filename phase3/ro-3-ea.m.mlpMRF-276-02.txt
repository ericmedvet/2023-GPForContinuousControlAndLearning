ea.runOutcome(
  index = 276;
  run = ea.run(
    problem = ea.p.mr.fromData(
      trainingDataset = ea.dataset.numerical.fromFile(
        filePath = "../phase2/data-ro-gp-3-009.txt";
        folds = [0];
        nFolds = 50;
        xVarNamePattern = "x.*";
        yVarNamePattern = "y.*"
      )
    );
    randomGenerator = ea.rg.defaultRG(seed = 2);
    solver = ea.s.numGA(
      crossoverP = 0.8;
      initialMaxV = 1;
      initialMinV = -1;
      mapper = ea.m.mlpMRF(
        dataset = ea.d.num.empty(
          xVars = [
            x01;
            x02;
            x03;
            x04;
            x05;
            x06;
            x07;
            x08;
            x09;
            x10;
            x11;
            x12;
            x13;
            x14;
            x15;
            x16
          ];
          yVars = [y1; y2; y3; y4]
        );
        innerLayerRatio = 0.65;
        nOfInnerLayers = 1
      );
      minNTournament = 3;
      nEval = 10000;
      nPop = 100;
      sigmaMut = 0.35;
      tournamentRate = 0.05
    )
  );
  serializedGenotypes = [
    "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"
  ]
)