ea.runOutcome(
  index = 279;
  run = ea.run(
    problem = ea.p.mr.fromData(
      trainingDataset = ea.dataset.numerical.fromFile(
        filePath = "../phase2/data-ro-gp-3-009.txt";
        folds = [0];
        nFolds = 40;
        xVarNamePattern = "x.*";
        yVarNamePattern = "y.*"
      )
    );
    randomGenerator = ea.rg.defaultRG(seed = 5);
    solver = ea.s.numGA(
      crossoverP = 0.8;
      initialMaxV = 1;
      initialMinV = -1;
      mapper = ea.m.mlpMRF(
        dataset = ea.d.num.empty(
          xVars = [
            x0;
            x1;
            x2;
            x3;
            x4;
            x5;
            x6;
            x7;
            x8;
            x9;
            x10;
            x11;
            x12;
            x13;
            x14;
            x15
          ];
          yVars = [y0; y1; y2; y3]
        );
        innerLayerRatio = 0.65;
        nOfInnerLayers = 1
      );
      minNTournament = 3;
      nEval = 10000;
      nPop = 100;
      sigmaMut = 0.35;
      tournamentRate = 0.05
    )
  );
  serializedGenotypes = [
    "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"
  ]
)