ea.runOutcome(
  index = 335;
  run = ea.run(
    problem = ea.p.mr.fromData(
      trainingDataset = ea.dataset.numerical.fromFile(
        filePath = "../phase2/data-ro-ographea-3-003.txt";
        folds = [0];
        nFolds = 40;
        xVarNamePattern = "x.*";
        yVarNamePattern = "y.*"
      )
    );
    randomGenerator = ea.rg.defaultRG(seed = 1);
    solver = ea.s.numGA(
      crossoverP = 0.8;
      initialMaxV = 1;
      initialMinV = -1;
      mapper = ea.m.mlpMRF(
        dataset = ea.d.num.empty(
          xVars = [
            x0;
            x1;
            x2;
            x3;
            x4;
            x5;
            x6;
            x7;
            x8;
            x9;
            x10;
            x11;
            x12;
            x13;
            x14;
            x15
          ];
          yVars = [y0; y1; y2; y3]
        );
        innerLayerRatio = 0.65;
        nOfInnerLayers = 1
      );
      minNTournament = 3;
      nEval = 10000;
      nPop = 100;
      sigmaMut = 0.35;
      tournamentRate = 0.05
    )
  );
  serializedGenotypes = [
    "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"
  ]
)