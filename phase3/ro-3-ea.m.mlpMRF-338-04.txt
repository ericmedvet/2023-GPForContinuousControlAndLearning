ea.runOutcome(
  index = 338;
  run = ea.run(
    problem = ea.p.mr.fromData(
      trainingDataset = ea.dataset.numerical.fromFile(
        filePath = "../phase2/data-ro-ographea-3-003.txt";
        folds = [0];
        nFolds = 40;
        xVarNamePattern = "x.*";
        yVarNamePattern = "y.*"
      )
    );
    randomGenerator = ea.rg.defaultRG(seed = 4);
    solver = ea.s.numGA(
      crossoverP = 0.8;
      initialMaxV = 1;
      initialMinV = -1;
      mapper = ea.m.mlpMRF(
        dataset = ea.d.num.empty(
          xVars = [
            x0;
            x1;
            x2;
            x3;
            x4;
            x5;
            x6;
            x7;
            x8;
            x9;
            x10;
            x11;
            x12;
            x13;
            x14;
            x15
          ];
          yVars = [y0; y1; y2; y3]
        );
        innerLayerRatio = 0.65;
        nOfInnerLayers = 1
      );
      minNTournament = 3;
      nEval = 10000;
      nPop = 100;
      sigmaMut = 0.35;
      tournamentRate = 0.05
    )
  );
  serializedGenotypes = [
    "rO0ABXNyABNqYXZhLnV0aWwuQXJyYXlMaXN0eIHSHZnHYZ0DAAFJAARzaXpleHAAAADWdwQAAADWc3IAEGphdmEubGFuZy5Eb3VibGWAs8JKKWv7BAIAAUQABXZhbHVleHIAEGphdmEubGFuZy5OdW1iZXKGrJUdC5TgiwIAAHhwP7WG8QQcpYhzcQB+AAI/3CXXTfkAP3NxAH4AAr/e2ZX4PSsNc3EAfgACP62wdpEQzMFzcQB+AAI/rDU44/ttKHNxAH4AAr/+JyB4ZLQ1c3EAfgACP+ARE4xhJ6pzcQB+AAI/61YCF3wEHXNxAH4AAj/yfoxTS1SAc3EAfgACP6XoG5G4OxBzcQB+AAK/9NayvNbV8HNxAH4AAj/u98SU/3Nuc3EAfgACv9YxdMVEillzcQB+AAI/60bdE7pVKnNxAH4AAj/2kxrrAIHSc3EAfgACv8Gxd68fu0FzcQB+AAI/18dRlahPqXNxAH4AAr/NpL+R9n7Ac3EAfgACP7kiey1LllNzcQB+AAK/5FXOP59NJHNxAH4AAj/mOqgHcae2c3EAfgACP+5vAERTQSNzcQB+AAI/45+76B52hHNxAH4AAj/hQIVP9L/Hc3EAfgACv+PjHG1wzXVzcQB+AAI/7edASmBFS3NxAH4AAr//ZCGnVWygc3EAfgACv8q02oWVLjlzcQB+AAI/4qQhrKe6unNxAH4AAj/yvOS1Dl/3c3EAfgACP/CWydjePLtzcQB+AAI/+ZeSAsjHqHNxAH4AAj/5+bu+UTgmc3EAfgACP+NYWQMgB2FzcQB+AAK/16ziiLHC5HNxAH4AAr/95jFk6wiOc3EAfgACP+/1xWJ7UjhzcQB+AAK/1Hehp3mhLnNxAH4AAr/E8ufOEVELc3EAfgACv9Qc4oNM/RZzcQB+AAK/+SLj9I4IrXNxAH4AAj/HD7/bLTdmc3EAfgACwAJOwti5juRzcQB+AAK/w2jwkMBt1HNxAH4AAj/uOb+RwrfVc3EAfgACv4I1wwTnovBzcQB+AAI/5+kvP7Q1DXNxAH4AAj+yGb7M13Akc3EAfgACv9kWpTpumuFzcQB+AAI/96mWthAh6HNxAH4AAr+6QGyVL07Mc3EAfgACv/Pm6IVpQhlzcQB+AAK/53lzZ2K7h3NxAH4AAr/hJT8u/VfSc3EAfgACv/T6dW4UYJRzcQB+AAK/2hb736TfEHNxAH4AAr/DpsvQU5T8c3EAfgACv5V+Ar9qJ3ZzcQB+AAI/+PYp/YOW33NxAH4AAr/yiti2skPZc3EAfgACv/s/cqh+1mhzcQB+AAI/661GvqpqpnNxAH4AAj/kFJePOnQkc3EAfgACv9Y16uebvhBzcQB+AAI/6vO1dyMquXNxAH4AAr/iICQpxKnMc3EAfgACv9o69n7IYrJzcQB+AAI/1+XPVsdZkHNxAH4AAr/MevAi/6ASc3EAfgACv/dn4/i7YytzcQB+AAI/97d9SSv8V3NxAH4AAr/cEHbUaG3Dc3EAfgACv8UhMlJoxVRzcQB+AAK/9HV0Tsi3iHNxAH4AAr+zSUD7cDq2c3EAfgACv/HzXCiwUYtzcQB+AAI/wyJY1nRk53NxAH4AAj/whHgLq605c3EAfgACP+WwvO/9/RNzcQB+AAI/66wVi1X6n3NxAH4AAr/gw2cLdflic3EAfgACv/V2nZ5J1QhzcQB+AAK/4QC148wju3NxAH4AAj/mMhNokfbqc3EAfgACwAFb80zv3UxzcQB+AAK/4nsvNUDccHNxAH4AAj/1JCPEc3oQc3EAfgACv/YlwPfUBWZzcQB+AAI/z1DLYRGT4XNxAH4AAj/chMN91k/cc3EAfgACP9My1wOQNG5zcQB+AAI/7XPSS5mpXHNxAH4AAr/UC4r+x48wc3EAfgACP9+WfTfOKM5zcQB+AAI/4YdbTm5MWXNxAH4AAr/cC6ni74i+c3EAfgACP+dLGqheSYlzcQB+AAI/wvs/O+oCInNxAH4AAr/F/0T/xpPnc3EAfgACP9z4G2wc2ORzcQB+AAK/67VANK+lUnNxAH4AAr//Lqthcv9gc3EAfgACP+z4AJRaDaRzcQB+AAK/3nIhHt4YmnNxAH4AAr/xP0IuxNp6c3EAfgACv/7bq0lGXXlzcQB+AAK/ohTpHbhiYHNxAH4AAr/w43hEx3aMc3EAfgACP7g28WHKxMRzcQB+AAK/8ZJeJsGIX3NxAH4AAj/Usi0aRctUc3EAfgACv/5R4/XI2QpzcQB+AAK/6BUYVJaPdHNxAH4AAr/5SRwM/zJqc3EAfgACP/Ss+vMRluxzcQB+AAK/0R04hFsnenNxAH4AAr9HUrbeQd0Ac3EAfgACv9JFbqOFKqxzcQB+AAI/9/JU7f1+4HNxAH4AAj/SEaNK2bYic3EAfgACP+vilgSp6bJzcQB+AAI/5Qg6xpKiTnNxAH4AAr/oIKQU5rYvc3EAfgACP+n9dnGYlCRzcQB+AAI//o7/hIwplHNxAH4AAj+piQE2oItcc3EAfgACP9Q6d9dIKI9zcQB+AAI/sYcdEbvMBHNxAH4AAr/h719qdO4+c3EAfgACP+pLxXsqAltzcQB+AAK/67RddvtLsXNxAH4AAr/iA9mptu2gc3EAfgACv+mOrvUvhSFzcQB+AAI/4s1z53cLP3NxAH4AAr/+pCAQK49Vc3EAfgACv+1vhtBef9ZzcQB+AAI/70vzww3C1HNxAH4AAr/TIdLsb4ufc3EAfgACP9yhLmJjd/RzcQB+AAK/13aXkSuGwHNxAH4AAj/awQ24V2MBc3EAfgACv+Jp+dAPJZ5zcQB+AAI/tPaQmKw/OHNxAH4AAr/RHQ4Z0nzmc3EAfgACv9xW0hfnqGRzcQB+AAI/yAtIebNsWnNxAH4AAj/QZOBvClQ+c3EAfgACv9Xvm6lorWNzcQB+AAI/44NK/ih7FnNxAH4AAr91LZWhK2fAc3EAfgACv/D78TykvUtzcQB+AAI/iOEKlHv08HNxAH4AAr/sAkDrLXgwc3EAfgACP+BB/AU4wflzcQB+AAK/3KFk+fYtEHNxAH4AAj/rYmtHVC+sc3EAfgACP/sIopePclNzcQB+AAK/7ZnzttaaMHNxAH4AAr/crO72GLoPc3EAfgACv91QUcVAjHFzcQB+AAI/0MEdrS35/HNxAH4AAsADMjsuR/Fpc3EAfgACP2E53ayXxABzcQB+AAI/32VW5cQvfnNxAH4AAr/r/+5WbmaSc3EAfgACP8+/ybgPQBtzcQB+AAK/+JCtwsbsIHNxAH4AAr/wUpfSHfvnc3EAfgACv8yHLQYKtxhzcQB+AAK/2dJYRhVLfHNxAH4AAr+9xf2cOWuoc3EAfgACP9CiLxYJZbpzcQB+AAK/+ul1pGpyoXNxAH4AAr/yp/um1xn0c3EAfgACv8Xz/yTsJQlzcQB+AAK/+Wo091ltFnNxAH4AAr/jrqsCYka9c3EAfgACv/l91VZTTzBzcQB+AAI/5W5WXanzC3NxAH4AAj/jgQklq90mc3EAfgACv+tusIGJNWVzcQB+AAK/1KigE+zBIHNxAH4AAj/kStjng/2Ec3EAfgACv4lplnP8toBzcQB+AAI/t5fOt2MPMHNxAH4AAj/MVwqWWUGZc3EAfgACv9e3jfVyR4BzcQB+AAK/5pqKOF5XD3NxAH4AAj/cvTInDzh4c3EAfgACv7aAka4fEO5zcQB+AAK/znXgOGoaUnNxAH4AAr/IX+ecfpVIc3EAfgACv+GMLOviQTRzcQB+AAI/8s+u6R20onNxAH4AAr/8PdS13ly0c3EAfgACP/oFwoUMUfJzcQB+AAK/+Gqf7gucR3NxAH4AAsACGQrZ6QoYc3EAfgACv9XTBhGCcRpzcQB+AAK/0yC2sTz6MXNxAH4AAr/O5VFZRQ6Tc3EAfgACv9o5AO0EtKhzcQB+AAK/5rtXUc79w3NxAH4AAj/mV8Mhg+qnc3EAfgACv+kIQ4DNMCJzcQB+AAI/50siQ6+nyXNxAH4AAr/kpH5LqVoTc3EAfgACP/I8AwnQh9xzcQB+AAI/1Syv6xBSK3NxAH4AAj/qy72AcT7kc3EAfgACv7MUTqCTaMZzcQB+AAI/8VIzxedMYHNxAH4AAj/dJCcXgHbmc3EAfgACP+98BKZEMNJ4"
  ]
)