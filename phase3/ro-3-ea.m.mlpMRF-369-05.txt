ea.runOutcome(
  index = 369;
  run = ea.run(
    problem = ea.p.mr.fromData(
      trainingDataset = ea.dataset.numerical.fromFile(
        filePath = "../phase2/data-ro-ographea-3-005.txt";
        folds = [0];
        nFolds = 40;
        xVarNamePattern = "x.*";
        yVarNamePattern = "y.*"
      )
    );
    randomGenerator = ea.rg.defaultRG(seed = 5);
    solver = ea.s.numGA(
      crossoverP = 0.8;
      initialMaxV = 1;
      initialMinV = -1;
      mapper = ea.m.mlpMRF(
        dataset = ea.d.num.empty(
          xVars = [
            x0;
            x1;
            x2;
            x3;
            x4;
            x5;
            x6;
            x7;
            x8;
            x9;
            x10;
            x11;
            x12;
            x13;
            x14;
            x15
          ];
          yVars = [y0; y1; y2; y3]
        );
        innerLayerRatio = 0.65;
        nOfInnerLayers = 1
      );
      minNTournament = 3;
      nEval = 10000;
      nPop = 100;
      sigmaMut = 0.35;
      tournamentRate = 0.05
    )
  );
  serializedGenotypes = [
    "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"
  ]
)