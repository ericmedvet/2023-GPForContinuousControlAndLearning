ea.runOutcome(
  index = 381;
  run = ea.run(
    problem = ea.p.mr.fromData(
      trainingDataset = ea.dataset.numerical.fromFile(
        filePath = "../phase2/data-ro-ographea-3-006.txt";
        folds = [0];
        nFolds = 40;
        xVarNamePattern = "x.*";
        yVarNamePattern = "y.*"
      )
    );
    randomGenerator = ea.rg.defaultRG(seed = 2);
    solver = ea.s.numGA(
      crossoverP = 0.8;
      initialMaxV = 1;
      initialMinV = -1;
      mapper = ea.m.mlpMRF(
        dataset = ea.d.num.empty(
          xVars = [
            x0;
            x1;
            x2;
            x3;
            x4;
            x5;
            x6;
            x7;
            x8;
            x9;
            x10;
            x11;
            x12;
            x13;
            x14;
            x15
          ];
          yVars = [y0; y1; y2; y3]
        );
        innerLayerRatio = 0.65;
        nOfInnerLayers = 1
      );
      minNTournament = 3;
      nEval = 10000;
      nPop = 100;
      sigmaMut = 0.35;
      tournamentRate = 0.05
    )
  );
  serializedGenotypes = [
    "rO0ABXNyABNqYXZhLnV0aWwuQXJyYXlMaXN0eIHSHZnHYZ0DAAFJAARzaXpleHAAAADWdwQAAADWc3IAEGphdmEubGFuZy5Eb3VibGWAs8JKKWv7BAIAAUQABXZhbHVleHIAEGphdmEubGFuZy5OdW1iZXKGrJUdC5TgiwIAAHhwv/WupA8ytRhzcQB+AAK/98o/O74IYnNxAH4AAr/UpGTp1IYUc3EAfgACv+KZNvPYC+9zcQB+AAI/41QLboN01HNxAH4AAj/yPG8r4W4lc3EAfgACP+3xxDlgEkVzcQB+AAK/88g7L2NtZHNxAH4AAj/gmvQQqOlEc3EAfgACv/HGsswyNARzcQB+AAI/5JApInIJfXNxAH4AAj/biZUXTqcoc3EAfgACv/Nv4C7Ayh9zcQB+AAK/0Retmkniv3NxAH4AAj/R3uD7iErWc3EAfgACP5olTu1RhopzcQB+AAK/ze7AxgIsSHNxAH4AAj/f0ASku3NZc3EAfgACv81EEDnVbANzcQB+AAK/+LmPSEcH+HNxAH4AAr/qNIbNJlNZc3EAfgACv9giG1kQw2xzcQB+AAI/9Y4SiuMwOHNxAH4AAj/0rz5JzWZvc3EAfgACP8Eavh+/K+xzcQB+AAK/wNGYYkNwvHNxAH4AAr+l7ssZIZoEc3EAfgACP9dyil+iqzpzcQB+AAK/3Sa/yGg8LHNxAH4AAkAAK1rawHHac3EAfgACP/LL3KipDe5zcQB+AAK/9dq60i3oGnNxAH4AAr/cqQDmZimhc3EAfgACQAAR6fajsO5zcQB+AAK/9O75ronTonNxAH4AAj/+gkCyUfMSc3EAfgACP9fC9rHkNQRzcQB+AAK/8XXyXJrSsnNxAH4AAj/spv9yj0Qbc3EAfgACv9xVTEOPES9zcQB+AAK/9hYSfpIkfHNxAH4AAr/37ynj9oJRc3EAfgACP+NKFfp5G31zcQB+AAI/43CJxZcNUXNxAH4AAj/vQmOCRczUc3EAfgACv/xeOdhsIM5zcQB+AAK/hpZ1RhtKwHNxAH4AAj/bRCOtSDCec3EAfgACP8kQpxiEayBzcQB+AAI/3JvGUTFi4nNxAH4AAj/Z30kf5b3oc3EAfgACwAOly9AqKO9zcQB+AAK/zGxbixyw+HNxAH4AAj/2d08dOwFEc3EAfgACv+TrD16B/LxzcQB+AAI/uMn8RmmoWHNxAH4AAj+/GwZD/mXcc3EAfgACv8f89IUzeixzcQB+AAK/5eByv5yB/HNxAH4AAj8m1UVH8hYAc3EAfgACv+VrwmRylsJzcQB+AALABKwb2Vop8HNxAH4AAj/8kFTnSsq1c3EAfgACP/BDd0B5PY5zcQB+AAK/pYoCuOgVUHNxAH4AAr/sZ8XfcktGc3EAfgACP58egHtxdUBzcQB+AAI/w5kwsdhFLHNxAH4AAr/Nwz7djKmOc3EAfgACP+GLErXvTjpzcQB+AAI/5bqDrjdw5nNxAH4AAr/DQZun7cFYc3EAfgACv+VCn+pukJ9zcQB+AAK/9XhX6asIU3NxAH4AAj/HSD2o+92kc3EAfgACP+wFsvntwohzcQB+AAK/5yrcZx0253NxAH4AAr+0wQAGEfU7c3EAfgACP9buD7Lghy9zcQB+AAI/zG3V5ZSXS3NxAH4AAj/477t5qcgIc3EAfgACv/A13937/v5zcQB+AAK/yclJ5C7wfHNxAH4AAr/VJP7KAQ1cc3EAfgACP9MJLQbeoWJzcQB+AAK//J5DOJsnRnNxAH4AAsADOq2kEet/c3EAfgACP/acvOw7iV5zcQB+AAK/tM54EXUChHNxAH4AAr/O4ZjIV79Ec3EAfgACP9beJUMb8/hzcQB+AAI/964vdkAr3nNxAH4AAj/qUu2WGfE5c3EAfgACv+sUcWunqzhzcQB+AAI/yJrZHXo1e3NxAH4AAr/o/EF3malOc3EAfgACP/N2N2KqhKlzcQB+AAK/8CVEcDZvj3NxAH4AAj/w5yQ7Hc53c3EAfgACv+pmkgNcHfZzcQB+AAI/pWogLbmPPHNxAH4AAj/HDEHSQB/Nc3EAfgACv/LRw8I3Qo5zcQB+AAK/4ugBT18dSXNxAH4AAkAAvzYgBD2Gc3EAfgACv5KnqNEgGSBzcQB+AAI/9xD+UXZxGnNxAH4AAj/jtLM0+dVqc3EAfgACv9n0AEqq4PtzcQB+AAI/2RCbOiW+6HNxAH4AAr/6ymveZZJvc3EAfgACP/aT/u9ldRxzcQB+AAK/0s1KEnhhInNxAH4AAj/wGLrXZ51gc3EAfgACP+vPgM6Bj4JzcQB+AAK/9mosx/zQynNxAH4AAr/KMCGx3jLEc3EAfgACP9hAZ/E2681zcQB+AAI/z20dtq20hHNxAH4AAr/tqh0ADSF0c3EAfgACv/anjWbbpW1zcQB+AAI/56xJCbOxInNxAH4AAj/joVMo++VYc3EAfgACv8ZiyKMbMPhzcQB+AAK/wSAWbgw/IHNxAH4AAr/yauVFyNoTc3EAfgACv+SNaZbVCAdzcQB+AAK/wpvRDTwHOHNxAH4AAr/zq3FSqKOPc3EAfgACv+qrAbowQN5zcQB+AAK/4HgSfoI4e3NxAH4AAj/xAJvLN+QVc3EAfgACP9i1KnJ3rs5zcQB+AAI/6LCvnp6b/HNxAH4AAj/1qzV1ZDVEc3EAfgACP/8BkHfo77lzcQB+AAK/6MpfbRUk1HNxAH4AAj/wLqu5K0H/c3EAfgACQAQ84v+AswBzcQB+AAI/ybX40AqVYHNxAH4AAr/lKUGcatO7c3EAfgACP/TQlCfx8YdzcQB+AAK/6F/eB3hOfHNxAH4AAr+uA9jI2JCAc3EAfgACP/f2c+i32jhzcQB+AAI/7ZBSUvG48nNxAH4AAj/m/8bMdlm0c3EAfgACP9ttTJBcF7pzcQB+AAK/w772yDhfWnNxAH4AAj/1iDJaT7dkc3EAfgACP/3qddBRYPZzcQB+AALAAFTb6ntbGXNxAH4AAr/1B+Ka1OEJc3EAfgACv+42n6Anz3ZzcQB+AAI/+/DNBCbKF3NxAH4AAr/gh1jvaK5cc3EAfgACP/VpLx5MAFxzcQB+AAK/1ObOk+WS6nNxAH4AAj/uPdsAM9Mpc3EAfgACP/Ma9FSZnGRzcQB+AAK/20KAdqX2ZXNxAH4AAr/pGv/FE2Irc3EAfgACP/TG5x2CRrBzcQB+AAK/8/Mqw7Qf8HNxAH4AAj/Lxl4jxi/2c3EAfgACv8hJiRLIPqxzcQB+AAI/lnek7kXt0HNxAH4AAr/LACgszyKqc3EAfgACv7ChHWlkcQBzcQB+AAI/4pgrqQSqbHNxAH4AAr/gtuQf1B6Mc3EAfgACv+IB/wGlyKhzcQB+AAI/5LbeijKkK3NxAH4AAj/zZi2w9bzIc3EAfgACv92+FqspAhRzcQB+AAI/8NjgPMo8GXNxAH4AAsAAAZ2pSdflc3EAfgACv93cC8CFvD5zcQB+AAK/wnEaEebLuHNxAH4AAj/v2E+Ht0z6c3EAfgACP/YnmDaXw9VzcQB+AAK/3wdIQMNmO3NxAH4AAr/wzHbJ2eCXc3EAfgACP8dTEzdewMtzcQB+AAI/4BLoIcshenNxAH4AAr909DlGbzfAc3EAfgACP8if7Orh2BdzcQB+AAK/6cpST7l4FHNxAH4AAj/h+QX2Hz0Bc3EAfgACP/ee25NbttNzcQB+AAI/862pjYsZdXNxAH4AAr/vE0lwUPBzc3EAfgACP+qhybJcZfxzcQB+AAI/w3yKhm9yTHNxAH4AAj/UvRx2fAAgc3EAfgACP+24PrmCTbpzcQB+AAI/2M6+DMDAZHNxAH4AAj+j1BY/r9nzc3EAfgACv8Gn6ZJSy+xzcQB+AAI/+LXGN4sEFHNxAH4AAr/1DbZBbx3Zc3EAfgACv/NFiR0r3WVzcQB+AAI/yr/4yixcMnNxAH4AAj/tO4pvv2owc3EAfgACP8kmNHie/L5zcQB+AAK/4YJMBcNrtXNxAH4AAr/C4t3jOkehc3EAfgACP/TOe7XQdeNzcQB+AAK/2mVDqEAJ2HNxAH4AAj/SECV6BzQMc3EAfgACP7uRMh5VPb1zcQB+AAK/6XN6cH0/8XNxAH4AAj+60PiD+J1sc3EAfgACv849w6VmcUJ4"
  ]
)