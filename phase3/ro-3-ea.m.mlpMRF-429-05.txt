ea.runOutcome(
  index = 429;
  run = ea.run(
    problem = ea.p.mr.fromData(
      trainingDataset = ea.dataset.numerical.fromFile(
        filePath = "../phase2/data-ro-ographea-3-009.txt";
        folds = [0];
        nFolds = 40;
        xVarNamePattern = "x.*";
        yVarNamePattern = "y.*"
      )
    );
    randomGenerator = ea.rg.defaultRG(seed = 5);
    solver = ea.s.numGA(
      crossoverP = 0.8;
      initialMaxV = 1;
      initialMinV = -1;
      mapper = ea.m.mlpMRF(
        dataset = ea.d.num.empty(
          xVars = [
            x0;
            x1;
            x2;
            x3;
            x4;
            x5;
            x6;
            x7;
            x8;
            x9;
            x10;
            x11;
            x12;
            x13;
            x14;
            x15
          ];
          yVars = [y0; y1; y2; y3]
        );
        innerLayerRatio = 0.65;
        nOfInnerLayers = 1
      );
      minNTournament = 3;
      nEval = 10000;
      nPop = 100;
      sigmaMut = 0.35;
      tournamentRate = 0.05
    )
  );
  serializedGenotypes = [
    "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"
  ]
)