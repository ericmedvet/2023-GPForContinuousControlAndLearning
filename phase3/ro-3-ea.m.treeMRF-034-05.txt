ea.runOutcome(
  index = 34;
  run = ea.run(
    problem = ea.p.mr.fromData(
      trainingDataset = ea.dataset.numerical.fromFile(
        filePath = "../phase2/data-ro-ga-3-003.txt";
        folds = [0];
        nFolds = 40;
        xVarNamePattern = "x.*";
        yVarNamePattern = "y.*"
      )
    );
    randomGenerator = ea.rg.defaultRG(seed = 5);
    solver = ea.s.multiSRTreeGP(
      crossoverP = 0.8;
      diversity = true;
      mapper = ea.m.treeMRF(
        dataset = ea.d.num.empty(
          xVars = [
            x0;
            x1;
            x2;
            x3;
            x4;
            x5;
            x6;
            x7;
            x8;
            x9;
            x10;
            x11;
            x12;
            x13;
            x14;
            x15
          ];
          yVars = [y0; y1; y2; y3]
        );
        postOperator = tanh
      );
      maxConst = 5;
      maxTreeH = 8;
      minConst = 0;
      minNTournament = 3;
      minTreeH = 3;
      nAttemptsDiversity = 100;
      nConst = 10;
      nEval = 10000;
      nPop = 100;
      operators = [addition; subtraction; multiplication; prot_division];
      tournamentRate = 0.05
    )
  );
  serializedGenotypes = [
    "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"
  ]
)